{
  "version": 3,
  "sources": ["../../@firebase/app-check/src/state.ts", "../../@firebase/app-check/src/constants.ts", "../../@firebase/app-check/src/proactive-refresh.ts", "../../@firebase/app-check/src/errors.ts", "../../@firebase/app-check/src/util.ts", "../../@firebase/app-check/src/client.ts", "../../@firebase/app-check/src/indexeddb.ts", "../../@firebase/app-check/src/logger.ts", "../../@firebase/app-check/src/storage.ts", "../../@firebase/app-check/src/debug.ts", "../../@firebase/app-check/src/internal-api.ts", "../../@firebase/app-check/src/factory.ts", "../../@firebase/app-check/src/recaptcha.ts", "../../@firebase/app-check/src/providers.ts", "../../@firebase/app-check/src/api.ts", "../../@firebase/app-check/src/index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  AppCheckProvider,\n  AppCheckTokenInternal,\n  AppCheckTokenObserver\n} from './types';\nimport { Refresher } from './proactive-refresh';\nimport { Deferred } from '@firebase/util';\nimport { GreCAPTCHA } from './recaptcha';\nexport interface AppCheckState {\n  activated: boolean;\n  tokenObservers: AppCheckTokenObserver[];\n  provider?: AppCheckProvider;\n  token?: AppCheckTokenInternal;\n  cachedTokenPromise?: Promise<AppCheckTokenInternal | undefined>;\n  exchangeTokenPromise?: Promise<AppCheckTokenInternal>;\n  tokenRefresher?: Refresher;\n  reCAPTCHAState?: ReCAPTCHAState;\n  isTokenAutoRefreshEnabled?: boolean;\n}\n\nexport interface ReCAPTCHAState {\n  initialized: Deferred<GreCAPTCHA>;\n  widgetId?: string;\n  // True if the most recent recaptcha check succeeded.\n  succeeded?: boolean;\n}\n\nexport interface DebugState {\n  initialized: boolean;\n  enabled: boolean;\n  token?: Deferred<string>;\n}\n\nconst APP_CHECK_STATES = new Map<FirebaseApp, AppCheckState>();\nexport const DEFAULT_STATE: AppCheckState = {\n  activated: false,\n  tokenObservers: []\n};\n\nconst DEBUG_STATE: DebugState = {\n  initialized: false,\n  enabled: false\n};\n\n/**\n * Gets a reference to the state object.\n */\nexport function getStateReference(app: FirebaseApp): AppCheckState {\n  return APP_CHECK_STATES.get(app) || { ...DEFAULT_STATE };\n}\n\n/**\n * Set once on initialization. The map should hold the same reference to the\n * same object until this entry is deleted.\n */\nexport function setInitialState(\n  app: FirebaseApp,\n  state: AppCheckState\n): AppCheckState {\n  APP_CHECK_STATES.set(app, state);\n  return APP_CHECK_STATES.get(app) as AppCheckState;\n}\n\n// for testing only\nexport function clearState(): void {\n  APP_CHECK_STATES.clear();\n  DEBUG_STATE.enabled = false;\n  DEBUG_STATE.token = undefined;\n  DEBUG_STATE.initialized = false;\n}\n\nexport function getDebugState(): DebugState {\n  return DEBUG_STATE;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const BASE_ENDPOINT =\n  'https://content-firebaseappcheck.googleapis.com/v1';\n\nexport const EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaV3Token';\nexport const EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD =\n  'exchangeRecaptchaEnterpriseToken';\nexport const EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\n\nexport const TOKEN_REFRESH_TIME = {\n  /**\n   * The offset time before token natural expiration to run the refresh.\n   * This is currently 5 minutes.\n   */\n  OFFSET_DURATION: 5 * 60 * 1000,\n  /**\n   * This is the first retrial wait after an error. This is currently\n   * 30 seconds.\n   */\n  RETRIAL_MIN_WAIT: 30 * 1000,\n  /**\n   * This is the maximum retrial wait, currently 16 minutes.\n   */\n  RETRIAL_MAX_WAIT: 16 * 60 * 1000\n};\n\n/**\n * One day in millis, for certain error code backoffs.\n */\nexport const ONE_DAY = 24 * 60 * 60 * 1000;\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\n/**\n * Port from auth proactiverefresh.js\n *\n */\n// TODO: move it to @firebase/util?\n// TODO: allow to config whether refresh should happen in the background\nexport class Refresher {\n  private pending: Deferred<unknown> | null = null;\n  private nextErrorWaitInterval: number;\n  constructor(\n    private readonly operation: () => Promise<unknown>,\n    private readonly retryPolicy: (error: unknown) => boolean,\n    private readonly getWaitDuration: () => number,\n    private readonly lowerBound: number,\n    private readonly upperBound: number\n  ) {\n    this.nextErrorWaitInterval = lowerBound;\n\n    if (lowerBound > upperBound) {\n      throw new Error(\n        'Proactive refresh lower bound greater than upper bound!'\n      );\n    }\n  }\n\n  start(): void {\n    this.nextErrorWaitInterval = this.lowerBound;\n    this.process(true).catch(() => {\n      /* we don't care about the result */\n    });\n  }\n\n  stop(): void {\n    if (this.pending) {\n      this.pending.reject('cancelled');\n      this.pending = null;\n    }\n  }\n\n  isRunning(): boolean {\n    return !!this.pending;\n  }\n\n  private async process(hasSucceeded: boolean): Promise<void> {\n    this.stop();\n    try {\n      this.pending = new Deferred();\n      this.pending.promise.catch(_e => {\n        /* ignore */\n      });\n      await sleep(this.getNextRun(hasSucceeded));\n\n      // Why do we resolve a promise, then immediate wait for it?\n      // We do it to make the promise chain cancellable.\n      // We can call stop() which rejects the promise before the following line execute, which makes\n      // the code jump to the catch block.\n      // TODO: unit test this\n      this.pending.resolve();\n      await this.pending.promise;\n      this.pending = new Deferred();\n      this.pending.promise.catch(_e => {\n        /* ignore */\n      });\n      await this.operation();\n\n      this.pending.resolve();\n      await this.pending.promise;\n\n      this.process(true).catch(() => {\n        /* we don't care about the result */\n      });\n    } catch (error) {\n      if (this.retryPolicy(error)) {\n        this.process(false).catch(() => {\n          /* we don't care about the result */\n        });\n      } else {\n        this.stop();\n      }\n    }\n  }\n\n  private getNextRun(hasSucceeded: boolean): number {\n    if (hasSucceeded) {\n      // If last operation succeeded, reset next error wait interval and return\n      // the default wait duration.\n      this.nextErrorWaitInterval = this.lowerBound;\n      // Return typical wait duration interval after a successful operation.\n      return this.getWaitDuration();\n    } else {\n      // Get next error wait interval.\n      const currentErrorWaitInterval = this.nextErrorWaitInterval;\n      // Double interval for next consecutive error.\n      this.nextErrorWaitInterval *= 2;\n      // Make sure next wait interval does not exceed the maximum upper bound.\n      if (this.nextErrorWaitInterval > this.upperBound) {\n        this.nextErrorWaitInterval = this.upperBound;\n      }\n      return currentErrorWaitInterval;\n    }\n  }\n}\n\nfunction sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppCheckError {\n  ALREADY_INITIALIZED = 'already-initialized',\n  USE_BEFORE_ACTIVATION = 'use-before-activation',\n  FETCH_NETWORK_ERROR = 'fetch-network-error',\n  FETCH_PARSE_ERROR = 'fetch-parse-error',\n  FETCH_STATUS_ERROR = 'fetch-status-error',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_WRITE = 'storage-set',\n  RECAPTCHA_ERROR = 'recaptcha-error',\n  INITIAL_THROTTLE = 'initial-throttle',\n  THROTTLED = 'throttled'\n}\n\nconst ERRORS: ErrorMap<AppCheckError> = {\n  [AppCheckError.ALREADY_INITIALIZED]:\n    'You have already called initializeAppCheck() for FirebaseApp {$appName} with ' +\n    'different options. To avoid this error, call initializeAppCheck() with the ' +\n    'same options as when it was originally called. This will return the ' +\n    'already initialized instance.',\n  [AppCheckError.USE_BEFORE_ACTIVATION]:\n    'App Check is being used before initializeAppCheck() is called for FirebaseApp {$appName}. ' +\n    'Call initializeAppCheck() before instantiating other Firebase services.',\n  [AppCheckError.FETCH_NETWORK_ERROR]:\n    'Fetch failed to connect to a network. Check Internet connection. ' +\n    'Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_PARSE_ERROR]:\n    'Fetch client could not parse response.' +\n    ' Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_STATUS_ERROR]:\n    'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [AppCheckError.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_WRITE]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.RECAPTCHA_ERROR]: 'ReCAPTCHA error.',\n  [AppCheckError.INITIAL_THROTTLE]: `{$httpStatus} error. Attempts allowed again after {$time}`,\n  [AppCheckError.THROTTLED]: `Requests throttled due to previous {$httpStatus} error. Attempts allowed again after {$time}`\n};\n\ninterface ErrorParams {\n  [AppCheckError.ALREADY_INITIALIZED]: { appName: string };\n  [AppCheckError.USE_BEFORE_ACTIVATION]: { appName: string };\n  [AppCheckError.FETCH_NETWORK_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_PARSE_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_STATUS_ERROR]: { httpStatus: number };\n  [AppCheckError.STORAGE_OPEN]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_GET]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_WRITE]: { originalErrorMessage?: string };\n  [AppCheckError.INITIAL_THROTTLE]: { time: string; httpStatus: number };\n  [AppCheckError.THROTTLED]: { time: string; httpStatus: number };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppCheckError, ErrorParams>(\n  'appCheck',\n  'AppCheck',\n  ERRORS\n);\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GreCAPTCHA } from './recaptcha';\nimport { getStateReference } from './state';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { FirebaseApp } from '@firebase/app';\n\nexport function getRecaptcha(\n  isEnterprise: boolean = false\n): GreCAPTCHA | undefined {\n  if (isEnterprise) {\n    return self.grecaptcha?.enterprise;\n  }\n  return self.grecaptcha;\n}\n\nexport function ensureActivated(app: FirebaseApp): void {\n  if (!getStateReference(app).activated) {\n    throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n      appName: app.name\n    });\n  }\n}\n\nexport function getDurationString(durationInMillis: number): string {\n  const totalSeconds = Math.round(durationInMillis / 1000);\n  const days = Math.floor(totalSeconds / (3600 * 24));\n  const hours = Math.floor((totalSeconds - days * 3600 * 24) / 3600);\n  const minutes = Math.floor(\n    (totalSeconds - days * 3600 * 24 - hours * 3600) / 60\n  );\n  const seconds = totalSeconds - days * 3600 * 24 - hours * 3600 - minutes * 60;\n\n  let result = '';\n  if (days) {\n    result += pad(days) + 'd:';\n  }\n  if (hours) {\n    result += pad(hours) + 'h:';\n  }\n  result += pad(minutes) + 'm:' + pad(seconds) + 's';\n  return result;\n}\n\nfunction pad(value: number): string {\n  if (value === 0) {\n    return '00';\n  }\n  return value >= 10 ? value.toString() : '0' + value;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BASE_ENDPOINT,\n  EXCHANGE_DEBUG_TOKEN_METHOD,\n  EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD,\n  EXCHANGE_RECAPTCHA_TOKEN_METHOD\n} from './constants';\nimport { FirebaseApp } from '@firebase/app';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { Provider } from '@firebase/component';\nimport { AppCheckTokenInternal } from './types';\n\n/**\n * Response JSON returned from AppCheck server endpoint.\n */\ninterface AppCheckResponse {\n  token: string;\n  // timeToLive\n  ttl: string;\n}\n\ninterface AppCheckRequest {\n  url: string;\n  body: { [key: string]: string };\n}\n\nexport async function exchangeToken(\n  { url, body }: AppCheckRequest,\n  heartbeatServiceProvider: Provider<'heartbeat'>\n): Promise<AppCheckTokenInternal> {\n  const headers: HeadersInit = {\n    'Content-Type': 'application/json'\n  };\n  // If heartbeat service exists, add heartbeat header string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers['X-Firebase-Client'] = heartbeatsHeader;\n    }\n  }\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers\n  };\n  let response;\n  try {\n    response = await fetch(url, options);\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_NETWORK_ERROR, {\n      originalErrorMessage: (originalError as Error)?.message\n    });\n  }\n\n  if (response.status !== 200) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_STATUS_ERROR, {\n      httpStatus: response.status\n    });\n  }\n\n  let responseBody: AppCheckResponse;\n  try {\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    responseBody = await response.json();\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage: (originalError as Error)?.message\n    });\n  }\n\n  // Protobuf duration format.\n  // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration\n  const match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\n  if (!match || !match[2] || isNaN(Number(match[1]))) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage:\n        `ttl field (timeToLive) is not in standard Protobuf Duration ` +\n        `format: ${responseBody.ttl}`\n    });\n  }\n  const timeToLiveAsNumber = Number(match[1]) * 1000;\n\n  const now = Date.now();\n  return {\n    token: responseBody.token,\n    expireTimeMillis: now + timeToLiveAsNumber,\n    issuedAtTimeMillis: now\n  };\n}\n\nexport function getExchangeRecaptchaV3TokenRequest(\n  app: FirebaseApp,\n  reCAPTCHAToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      'recaptcha_v3_token': reCAPTCHAToken\n    }\n  };\n}\n\nexport function getExchangeRecaptchaEnterpriseTokenRequest(\n  app: FirebaseApp,\n  reCAPTCHAToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      'recaptcha_enterprise_token': reCAPTCHAToken\n    }\n  };\n}\n\nexport function getExchangeDebugTokenRequest(\n  app: FirebaseApp,\n  debugToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_DEBUG_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      debug_token: debugToken\n    }\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { AppCheckTokenInternal } from './types';\nconst DB_NAME = 'firebase-app-check-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-app-check-store';\nconst DEBUG_TOKEN_KEY = 'debug-token';\n\nlet dbPromise: Promise<IDBDatabase> | null = null;\nfunction getDBPromise(): Promise<IDBDatabase> {\n  if (dbPromise) {\n    return dbPromise;\n  }\n\n  dbPromise = new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onsuccess = event => {\n        resolve((event.target as IDBOpenDBRequest).result);\n      };\n\n      request.onerror = event => {\n        reject(\n          ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n            originalErrorMessage: (event.target as IDBRequest).error?.message\n          })\n        );\n      };\n\n      request.onupgradeneeded = event => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (e) {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n          originalErrorMessage: (e as Error)?.message\n        })\n      );\n    }\n  });\n\n  return dbPromise;\n}\n\nexport function readTokenFromIndexedDB(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  return read(computeKey(app)) as Promise<AppCheckTokenInternal | undefined>;\n}\n\nexport function writeTokenToIndexedDB(\n  app: FirebaseApp,\n  token?: AppCheckTokenInternal\n): Promise<void> {\n  return write(computeKey(app), token);\n}\n\nexport function writeDebugTokenToIndexedDB(token: string): Promise<void> {\n  return write(DEBUG_TOKEN_KEY, token);\n}\n\nexport function readDebugTokenFromIndexedDB(): Promise<string | undefined> {\n  return read(DEBUG_TOKEN_KEY) as Promise<string | undefined>;\n}\n\nasync function write(key: string, value: unknown): Promise<void> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readwrite');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.put({\n    compositeKey: key,\n    value\n  });\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = _event => {\n      resolve();\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_WRITE, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nasync function read(key: string): Promise<unknown> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readonly');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.get(key);\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = event => {\n      const result = (event.target as IDBRequest).result;\n\n      if (result) {\n        resolve(result.value);\n      } else {\n        resolve(undefined);\n      }\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_GET, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.options.appId}-${app.name}`;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app-check');\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { isIndexedDBAvailable } from '@firebase/util';\nimport {\n  readDebugTokenFromIndexedDB,\n  readTokenFromIndexedDB,\n  writeDebugTokenToIndexedDB,\n  writeTokenToIndexedDB\n} from './indexeddb';\nimport { logger } from './logger';\nimport { AppCheckTokenInternal } from './types';\n\n/**\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\n */\nexport async function readTokenFromStorage(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  if (isIndexedDBAvailable()) {\n    let token = undefined;\n    try {\n      token = await readTokenFromIndexedDB(app);\n    } catch (e) {\n      // swallow the error and return undefined\n      logger.warn(`Failed to read token from IndexedDB. Error: ${e}`);\n    }\n    return token;\n  }\n\n  return undefined;\n}\n\n/**\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\n */\nexport function writeTokenToStorage(\n  app: FirebaseApp,\n  token?: AppCheckTokenInternal\n): Promise<void> {\n  if (isIndexedDBAvailable()) {\n    return writeTokenToIndexedDB(app, token).catch(e => {\n      // swallow the error and resolve the promise\n      logger.warn(`Failed to write token to IndexedDB. Error: ${e}`);\n    });\n  }\n\n  return Promise.resolve();\n}\n\nexport async function readOrCreateDebugTokenFromStorage(): Promise<string> {\n  /**\n   * Theoretically race condition can happen if we read, then write in 2 separate transactions.\n   * But it won't happen here, because this function will be called exactly once.\n   */\n  let existingDebugToken: string | undefined = undefined;\n  try {\n    existingDebugToken = await readDebugTokenFromIndexedDB();\n  } catch (_e) {\n    // failed to read from indexeddb. We assume there is no existing debug token, and generate a new one.\n  }\n\n  if (!existingDebugToken) {\n    // create a new debug token\n    // This function is only available in secure contexts. See https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts\n    const newToken = crypto.randomUUID();\n    // We don't need to block on writing to indexeddb\n    // In case persistence failed, a new debug token will be generated every time the page is refreshed.\n    // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\n    // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\n    // You should switch to a different browser that supports indexeddb\n    writeDebugTokenToIndexedDB(newToken).catch(e =>\n      logger.warn(`Failed to persist debug token to IndexedDB. Error: ${e}`)\n    );\n    return newToken;\n  } else {\n    return existingDebugToken;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getDebugState } from './state';\nimport { readOrCreateDebugTokenFromStorage } from './storage';\nimport { Deferred, getGlobal } from '@firebase/util';\n\ndeclare global {\n  // var must be used for global scopes\n  // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#type-checking-for-globalthis\n  // eslint-disable-next-line no-var\n  var FIREBASE_APPCHECK_DEBUG_TOKEN: boolean | string | undefined;\n}\n\nexport function isDebugMode(): boolean {\n  const debugState = getDebugState();\n  return debugState.enabled;\n}\n\nexport async function getDebugToken(): Promise<string> {\n  const state = getDebugState();\n\n  if (state.enabled && state.token) {\n    return state.token.promise;\n  } else {\n    // should not happen!\n    throw Error(`\n            Can't get debug token in production mode.\n        `);\n  }\n}\n\nexport function initializeDebugMode(): void {\n  const globals = getGlobal();\n  const debugState = getDebugState();\n  // Set to true if this function has been called, whether or not\n  // it enabled debug mode.\n  debugState.initialized = true;\n\n  if (\n    typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' &&\n    globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true\n  ) {\n    return;\n  }\n\n  debugState.enabled = true;\n  const deferredToken = new Deferred<string>();\n  debugState.token = deferredToken;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\n    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\n  } else {\n    deferredToken.resolve(readOrCreateDebugTokenFromStorage());\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  AppCheckTokenResult,\n  AppCheckTokenInternal,\n  AppCheckTokenObserver,\n  ListenerType\n} from './types';\nimport { AppCheckTokenListener } from './public-types';\nimport { getStateReference } from './state';\nimport { TOKEN_REFRESH_TIME } from './constants';\nimport { Refresher } from './proactive-refresh';\nimport { ensureActivated } from './util';\nimport { exchangeToken, getExchangeDebugTokenRequest } from './client';\nimport { writeTokenToStorage } from './storage';\nimport { getDebugToken, isDebugMode } from './debug';\nimport { base64, FirebaseError } from '@firebase/util';\nimport { logger } from './logger';\nimport { AppCheckService } from './factory';\nimport { AppCheckError } from './errors';\n\n// Initial hardcoded value agreed upon across platforms for initial launch.\n// Format left open for possible dynamic error values and other fields in the future.\nexport const defaultTokenErrorData = { error: 'UNKNOWN_ERROR' };\n\n/**\n * Stringify and base64 encode token error data.\n *\n * @param tokenError Error data, currently hardcoded.\n */\nexport function formatDummyToken(\n  tokenErrorData: Record<string, string>\n): string {\n  return base64.encodeString(\n    JSON.stringify(tokenErrorData),\n    /* webSafe= */ false\n  );\n}\n\n/**\n * This function always resolves.\n * The result will contain an error field if there is any error.\n * In case there is an error, the token field in the result will be populated with a dummy value\n */\nexport async function getToken(\n  appCheck: AppCheckService,\n  forceRefresh = false,\n  shouldLogErrors = false\n): Promise<AppCheckTokenResult> {\n  const app = appCheck.app;\n  ensureActivated(app);\n\n  const state = getStateReference(app);\n\n  /**\n   * First check if there is a token in memory from a previous `getToken()` call.\n   */\n  let token: AppCheckTokenInternal | undefined = state.token;\n  let error: Error | undefined = undefined;\n\n  /**\n   * If an invalid token was found in memory, clear token from\n   * memory and unset the local variable `token`.\n   */\n  if (token && !isValid(token)) {\n    state.token = undefined;\n    token = undefined;\n  }\n\n  /**\n   * If there is no valid token in memory, try to load token from indexedDB.\n   */\n  if (!token) {\n    // cachedTokenPromise contains the token found in IndexedDB or undefined if not found.\n    const cachedToken = await state.cachedTokenPromise;\n    if (cachedToken) {\n      if (isValid(cachedToken)) {\n        token = cachedToken;\n      } else {\n        // If there was an invalid token in the indexedDB cache, clear it.\n        await writeTokenToStorage(app, undefined);\n      }\n    }\n  }\n\n  // Return the cached token (from either memory or indexedDB) if it's valid\n  if (!forceRefresh && token && isValid(token)) {\n    return {\n      token: token.token\n    };\n  }\n\n  // Only set to true if this `getToken()` call is making the actual\n  // REST call to the exchange endpoint, versus waiting for an already\n  // in-flight call (see debug and regular exchange endpoint paths below)\n  let shouldCallListeners = false;\n\n  /**\n   * DEBUG MODE\n   * If debug mode is set, and there is no cached token, fetch a new App\n   * Check token using the debug token, and return it directly.\n   */\n  if (isDebugMode()) {\n    try {\n      // Avoid making another call to the exchange endpoint if one is in flight.\n      if (!state.exchangeTokenPromise) {\n        state.exchangeTokenPromise = exchangeToken(\n          getExchangeDebugTokenRequest(app, await getDebugToken()),\n          appCheck.heartbeatServiceProvider\n        ).finally(() => {\n          // Clear promise when settled - either resolved or rejected.\n          state.exchangeTokenPromise = undefined;\n        });\n        shouldCallListeners = true;\n      }\n      const tokenFromDebugExchange: AppCheckTokenInternal =\n        await state.exchangeTokenPromise;\n      // Write debug token to indexedDB.\n      await writeTokenToStorage(app, tokenFromDebugExchange);\n      // Write debug token to state.\n      state.token = tokenFromDebugExchange;\n      return { token: tokenFromDebugExchange.token };\n    } catch (e) {\n      if (\n        (e as FirebaseError).code === `appCheck/${AppCheckError.THROTTLED}` ||\n        (e as FirebaseError).code ===\n          `appCheck/${AppCheckError.INITIAL_THROTTLE}`\n      ) {\n        // Warn if throttled, but do not treat it as an error.\n        logger.warn((e as FirebaseError).message);\n      } else if (shouldLogErrors) {\n        logger.error(e);\n      }\n      // Return dummy token and error\n      return makeDummyTokenResult(e as FirebaseError);\n    }\n  }\n\n  /**\n   * There are no valid tokens in memory or indexedDB and we are not in\n   * debug mode.\n   * Request a new token from the exchange endpoint.\n   */\n  try {\n    // Avoid making another call to the exchange endpoint if one is in flight.\n    if (!state.exchangeTokenPromise) {\n      // state.provider is populated in initializeAppCheck()\n      // ensureActivated() at the top of this function checks that\n      // initializeAppCheck() has been called.\n      state.exchangeTokenPromise = state.provider!.getToken().finally(() => {\n        // Clear promise when settled - either resolved or rejected.\n        state.exchangeTokenPromise = undefined;\n      });\n      shouldCallListeners = true;\n    }\n    token = await getStateReference(app).exchangeTokenPromise;\n  } catch (e) {\n    if (\n      (e as FirebaseError).code === `appCheck/${AppCheckError.THROTTLED}` ||\n      (e as FirebaseError).code === `appCheck/${AppCheckError.INITIAL_THROTTLE}`\n    ) {\n      // Warn if throttled, but do not treat it as an error.\n      logger.warn((e as FirebaseError).message);\n    } else if (shouldLogErrors) {\n      logger.error(e);\n    }\n    // Always save error to be added to dummy token.\n    error = e as FirebaseError;\n  }\n\n  let interopTokenResult: AppCheckTokenResult | undefined;\n  if (!token) {\n    // If token is undefined, there must be an error.\n    // Return a dummy token along with the error.\n    interopTokenResult = makeDummyTokenResult(error!);\n  } else if (error) {\n    if (isValid(token)) {\n      // It's also possible a valid token exists, but there's also an error.\n      // (Such as if the token is almost expired, tries to refresh, and\n      // the exchange request fails.)\n      // We add a special error property here so that the refresher will\n      // count this as a failed attempt and use the backoff instead of\n      // retrying repeatedly with no delay, but any 3P listeners will not\n      // be hindered in getting the still-valid token.\n      interopTokenResult = {\n        token: token.token,\n        internalError: error\n      };\n    } else {\n      // No invalid tokens should make it to this step. Memory and cached tokens\n      // are checked. Other tokens are from fresh exchanges. But just in case.\n      interopTokenResult = makeDummyTokenResult(error!);\n    }\n  } else {\n    interopTokenResult = {\n      token: token.token\n    };\n    // write the new token to the memory state as well as the persistent storage.\n    // Only do it if we got a valid new token\n    state.token = token;\n    await writeTokenToStorage(app, token);\n  }\n\n  if (shouldCallListeners) {\n    notifyTokenListeners(app, interopTokenResult);\n  }\n  return interopTokenResult;\n}\n\n/**\n * Internal API for limited use tokens. Skips all FAC state and simply calls\n * the underlying provider.\n */\nexport async function getLimitedUseToken(\n  appCheck: AppCheckService\n): Promise<AppCheckTokenResult> {\n  const app = appCheck.app;\n  ensureActivated(app);\n\n  const { provider } = getStateReference(app);\n\n  if (isDebugMode()) {\n    const debugToken = await getDebugToken();\n    const { token } = await exchangeToken(\n      getExchangeDebugTokenRequest(app, debugToken),\n      appCheck.heartbeatServiceProvider\n    );\n    return { token };\n  } else {\n    // provider is definitely valid since we ensure AppCheck was activated\n    const { token } = await provider!.getToken();\n    return { token };\n  }\n}\n\nexport function addTokenListener(\n  appCheck: AppCheckService,\n  type: ListenerType,\n  listener: AppCheckTokenListener,\n  onError?: (error: Error) => void\n): void {\n  const { app } = appCheck;\n  const state = getStateReference(app);\n  const tokenObserver: AppCheckTokenObserver = {\n    next: listener,\n    error: onError,\n    type\n  };\n  state.tokenObservers = [...state.tokenObservers, tokenObserver];\n\n  // Invoke the listener async immediately if there is a valid token\n  // in memory.\n  if (state.token && isValid(state.token)) {\n    const validToken = state.token;\n    Promise.resolve()\n      .then(() => {\n        listener({ token: validToken.token });\n        initTokenRefresher(appCheck);\n      })\n      .catch(() => {\n        /* we don't care about exceptions thrown in listeners */\n      });\n  }\n\n  /**\n   * Wait for any cached token promise to resolve before starting the token\n   * refresher. The refresher checks to see if there is an existing token\n   * in state and calls the exchange endpoint if not. We should first let the\n   * IndexedDB check have a chance to populate state if it can.\n   *\n   * Listener call isn't needed here because cachedTokenPromise will call any\n   * listeners that exist when it resolves.\n   */\n\n  // state.cachedTokenPromise is always populated in `activate()`.\n  void state.cachedTokenPromise!.then(() => initTokenRefresher(appCheck));\n}\n\nexport function removeTokenListener(\n  app: FirebaseApp,\n  listener: AppCheckTokenListener\n): void {\n  const state = getStateReference(app);\n\n  const newObservers = state.tokenObservers.filter(\n    tokenObserver => tokenObserver.next !== listener\n  );\n  if (\n    newObservers.length === 0 &&\n    state.tokenRefresher &&\n    state.tokenRefresher.isRunning()\n  ) {\n    state.tokenRefresher.stop();\n  }\n\n  state.tokenObservers = newObservers;\n}\n\n/**\n * Logic to create and start refresher as needed.\n */\nfunction initTokenRefresher(appCheck: AppCheckService): void {\n  const { app } = appCheck;\n  const state = getStateReference(app);\n  // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\n  // is not true.\n  let refresher: Refresher | undefined = state.tokenRefresher;\n  if (!refresher) {\n    refresher = createTokenRefresher(appCheck);\n    state.tokenRefresher = refresher;\n  }\n  if (!refresher.isRunning() && state.isTokenAutoRefreshEnabled) {\n    refresher.start();\n  }\n}\n\nfunction createTokenRefresher(appCheck: AppCheckService): Refresher {\n  const { app } = appCheck;\n  return new Refresher(\n    // Keep in mind when this fails for any reason other than the ones\n    // for which we should retry, it will effectively stop the proactive refresh.\n    async () => {\n      const state = getStateReference(app);\n      // If there is no token, we will try to load it from storage and use it\n      // If there is a token, we force refresh it because we know it's going to expire soon\n      let result;\n      if (!state.token) {\n        result = await getToken(appCheck);\n      } else {\n        result = await getToken(appCheck, true);\n      }\n\n      /**\n       * getToken() always resolves. In case the result has an error field defined, it means\n       * the operation failed, and we should retry.\n       */\n      if (result.error) {\n        throw result.error;\n      }\n      /**\n       * A special `internalError` field reflects that there was an error\n       * getting a new token from the exchange endpoint, but there's still a\n       * previous token that's valid for now and this should be passed to 2P/3P\n       * requests for a token. But we want this callback (`this.operation` in\n       * `Refresher`) to throw in order to kick off the Refresher's retry\n       * backoff. (Setting `hasSucceeded` to false.)\n       */\n      if (result.internalError) {\n        throw result.internalError;\n      }\n    },\n    () => {\n      return true;\n    },\n    () => {\n      const state = getStateReference(app);\n\n      if (state.token) {\n        // issuedAtTime + (50% * total TTL) + 5 minutes\n        let nextRefreshTimeMillis =\n          state.token.issuedAtTimeMillis +\n          (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) *\n            0.5 +\n          5 * 60 * 1000;\n        // Do not allow refresh time to be past (expireTime - 5 minutes)\n        const latestAllowableRefresh =\n          state.token.expireTimeMillis - 5 * 60 * 1000;\n        nextRefreshTimeMillis = Math.min(\n          nextRefreshTimeMillis,\n          latestAllowableRefresh\n        );\n        return Math.max(0, nextRefreshTimeMillis - Date.now());\n      } else {\n        return 0;\n      }\n    },\n    TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT,\n    TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT\n  );\n}\n\nexport function notifyTokenListeners(\n  app: FirebaseApp,\n  token: AppCheckTokenResult\n): void {\n  const observers = getStateReference(app).tokenObservers;\n\n  for (const observer of observers) {\n    try {\n      if (observer.type === ListenerType.EXTERNAL && token.error != null) {\n        // If this listener was added by a 3P call, send any token error to\n        // the supplied error handler. A 3P observer always has an error\n        // handler.\n        observer.error!(token.error);\n      } else {\n        // If the token has no error field, always return the token.\n        // If this is a 2P listener, return the token, whether or not it\n        // has an error field.\n        observer.next(token);\n      }\n    } catch (e) {\n      // Errors in the listener function itself are always ignored.\n    }\n  }\n}\n\nexport function isValid(token: AppCheckTokenInternal): boolean {\n  return token.expireTimeMillis - Date.now() > 0;\n}\n\nfunction makeDummyTokenResult(error: Error): AppCheckTokenResult {\n  return {\n    token: formatDummyToken(defaultTokenErrorData),\n    error\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppCheck } from './public-types';\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\nimport { FirebaseAppCheckInternal, ListenerType } from './types';\nimport {\n  getToken,\n  getLimitedUseToken,\n  addTokenListener,\n  removeTokenListener\n} from './internal-api';\nimport { Provider } from '@firebase/component';\nimport { getStateReference } from './state';\n\n/**\n * AppCheck Service class.\n */\nexport class AppCheckService implements AppCheck, _FirebaseService {\n  constructor(\n    public app: FirebaseApp,\n    public heartbeatServiceProvider: Provider<'heartbeat'>\n  ) {}\n  _delete(): Promise<void> {\n    const { tokenObservers } = getStateReference(this.app);\n    for (const tokenObserver of tokenObservers) {\n      removeTokenListener(this.app, tokenObserver.next);\n    }\n    return Promise.resolve();\n  }\n}\n\nexport function factory(\n  app: FirebaseApp,\n  heartbeatServiceProvider: Provider<'heartbeat'>\n): AppCheckService {\n  return new AppCheckService(app, heartbeatServiceProvider);\n}\n\nexport function internalFactory(\n  appCheck: AppCheckService\n): FirebaseAppCheckInternal {\n  return {\n    getToken: forceRefresh => getToken(appCheck, forceRefresh),\n    getLimitedUseToken: () => getLimitedUseToken(appCheck),\n    addTokenListener: listener =>\n      addTokenListener(appCheck, ListenerType.INTERNAL, listener),\n    removeTokenListener: listener => removeTokenListener(appCheck.app, listener)\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { getStateReference } from './state';\nimport { Deferred } from '@firebase/util';\nimport { getRecaptcha, ensureActivated } from './util';\n\nexport const RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\nexport const RECAPTCHA_ENTERPRISE_URL =\n  'https://www.google.com/recaptcha/enterprise.js';\n\nexport function initializeV3(\n  app: FirebaseApp,\n  siteKey: string\n): Promise<GreCAPTCHA> {\n  const initialized = new Deferred<GreCAPTCHA>();\n\n  const state = getStateReference(app);\n  state.reCAPTCHAState = { initialized };\n\n  const divId = makeDiv(app);\n\n  const grecaptcha = getRecaptcha(false);\n  if (!grecaptcha) {\n    loadReCAPTCHAV3Script(() => {\n      const grecaptcha = getRecaptcha(false);\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n  return initialized.promise;\n}\nexport function initializeEnterprise(\n  app: FirebaseApp,\n  siteKey: string\n): Promise<GreCAPTCHA> {\n  const initialized = new Deferred<GreCAPTCHA>();\n\n  const state = getStateReference(app);\n  state.reCAPTCHAState = { initialized };\n\n  const divId = makeDiv(app);\n\n  const grecaptcha = getRecaptcha(true);\n  if (!grecaptcha) {\n    loadReCAPTCHAEnterpriseScript(() => {\n      const grecaptcha = getRecaptcha(true);\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n  return initialized.promise;\n}\n\n/**\n * Add listener to render the widget and resolve the promise when\n * the grecaptcha.ready() event fires.\n */\nfunction queueWidgetRender(\n  app: FirebaseApp,\n  siteKey: string,\n  grecaptcha: GreCAPTCHA,\n  container: string,\n  initialized: Deferred<GreCAPTCHA>\n): void {\n  grecaptcha.ready(() => {\n    // Invisible widgets allow us to set a different siteKey for each widget,\n    // so we use them to support multiple apps\n    renderInvisibleWidget(app, siteKey, grecaptcha, container);\n    initialized.resolve(grecaptcha);\n  });\n}\n\n/**\n * Add invisible div to page.\n */\nfunction makeDiv(app: FirebaseApp): string {\n  const divId = `fire_app_check_${app.name}`;\n  const invisibleDiv = document.createElement('div');\n  invisibleDiv.id = divId;\n  invisibleDiv.style.display = 'none';\n\n  document.body.appendChild(invisibleDiv);\n  return divId;\n}\n\nexport async function getToken(app: FirebaseApp): Promise<string> {\n  ensureActivated(app);\n\n  // ensureActivated() guarantees that reCAPTCHAState is set\n  const reCAPTCHAState = getStateReference(app).reCAPTCHAState!;\n  const recaptcha = await reCAPTCHAState.initialized.promise;\n\n  return new Promise((resolve, _reject) => {\n    // Updated after initialization is complete.\n    const reCAPTCHAState = getStateReference(app).reCAPTCHAState!;\n    recaptcha.ready(() => {\n      resolve(\n        // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\n        recaptcha.execute(reCAPTCHAState.widgetId!, {\n          action: 'fire_app_check'\n        })\n      );\n    });\n  });\n}\n\n/**\n *\n * @param app\n * @param container - Id of a HTML element.\n */\nfunction renderInvisibleWidget(\n  app: FirebaseApp,\n  siteKey: string,\n  grecaptcha: GreCAPTCHA,\n  container: string\n): void {\n  const widgetId = grecaptcha.render(container, {\n    sitekey: siteKey,\n    size: 'invisible',\n    // Success callback - set state\n    callback: () => {\n      getStateReference(app).reCAPTCHAState!.succeeded = true;\n    },\n    // Failure callback - set state\n    'error-callback': () => {\n      getStateReference(app).reCAPTCHAState!.succeeded = false;\n    }\n  });\n\n  const state = getStateReference(app);\n\n  state.reCAPTCHAState = {\n    ...state.reCAPTCHAState!, // state.reCAPTCHAState is set in the initialize()\n    widgetId\n  };\n}\n\nfunction loadReCAPTCHAV3Script(onload: () => void): void {\n  const script = document.createElement('script');\n  script.src = RECAPTCHA_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\nfunction loadReCAPTCHAEnterpriseScript(onload: () => void): void {\n  const script = document.createElement('script');\n  script.src = RECAPTCHA_ENTERPRISE_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\ndeclare global {\n  interface Window {\n    grecaptcha: GreCAPTCHATopLevel | undefined;\n  }\n}\n\nexport interface GreCAPTCHATopLevel extends GreCAPTCHA {\n  enterprise: GreCAPTCHA;\n}\n\nexport interface GreCAPTCHA {\n  ready: (callback: () => void) => void;\n  execute: (siteKey: string, options: { action: string }) => Promise<string>;\n  render: (\n    container: string | HTMLElement,\n    parameters: GreCAPTCHARenderOption\n  ) => string;\n}\n\nexport interface GreCAPTCHARenderOption {\n  sitekey: string;\n  size: 'invisible';\n  callback: () => void;\n  'error-callback': () => void;\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _getProvider } from '@firebase/app';\nimport { Provider } from '@firebase/component';\nimport {\n  FirebaseError,\n  issuedAtTime,\n  calculateBackoffMillis\n} from '@firebase/util';\nimport {\n  exchangeToken,\n  getExchangeRecaptchaEnterpriseTokenRequest,\n  getExchangeRecaptchaV3TokenRequest\n} from './client';\nimport { ONE_DAY } from './constants';\nimport { AppCheckError, ERROR_FACTORY } from './errors';\nimport { CustomProviderOptions } from './public-types';\nimport {\n  getToken as getReCAPTCHAToken,\n  initializeV3 as initializeRecaptchaV3,\n  initializeEnterprise as initializeRecaptchaEnterprise\n} from './recaptcha';\nimport { getStateReference } from './state';\nimport { AppCheckProvider, AppCheckTokenInternal, ThrottleData } from './types';\nimport { getDurationString } from './util';\n\n/**\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\n * for an App Check token.\n *\n * @public\n */\nexport class ReCaptchaV3Provider implements AppCheckProvider {\n  private _app?: FirebaseApp;\n  private _heartbeatServiceProvider?: Provider<'heartbeat'>;\n  /**\n   * Throttle requests on certain error codes to prevent too many retries\n   * in a short time.\n   */\n  private _throttleData: ThrottleData | null = null;\n  /**\n   * Create a ReCaptchaV3Provider instance.\n   * @param siteKey - ReCAPTCHA V3 siteKey.\n   */\n  constructor(private _siteKey: string) {}\n\n  /**\n   * Returns an App Check token.\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    throwIfThrottled(this._throttleData);\n\n    // Top-level `getToken()` has already checked that App Check is initialized\n    // and therefore this._app and this._heartbeatServiceProvider are available.\n    const attestedClaimsToken = await getReCAPTCHAToken(this._app!).catch(\n      _e => {\n        // reCaptcha.execute() throws null which is not very descriptive.\n        throw ERROR_FACTORY.create(AppCheckError.RECAPTCHA_ERROR);\n      }\n    );\n    // Check if a failure state was set by the recaptcha \"error-callback\".\n    if (!getStateReference(this._app!).reCAPTCHAState?.succeeded) {\n      throw ERROR_FACTORY.create(AppCheckError.RECAPTCHA_ERROR);\n    }\n    let result;\n    try {\n      result = await exchangeToken(\n        getExchangeRecaptchaV3TokenRequest(this._app!, attestedClaimsToken),\n        this._heartbeatServiceProvider!\n      );\n    } catch (e) {\n      if (\n        (e as FirebaseError).code?.includes(AppCheckError.FETCH_STATUS_ERROR)\n      ) {\n        this._throttleData = setBackoff(\n          Number((e as FirebaseError).customData?.httpStatus),\n          this._throttleData\n        );\n        throw ERROR_FACTORY.create(AppCheckError.INITIAL_THROTTLE, {\n          time: getDurationString(\n            this._throttleData.allowRequestsAfter - Date.now()\n          ),\n          httpStatus: this._throttleData.httpStatus\n        });\n      } else {\n        throw e;\n      }\n    }\n    // If successful, clear throttle data.\n    this._throttleData = null;\n    return result;\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n    this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n    initializeRecaptchaV3(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n\n  /**\n   * @internal\n   */\n  isEqual(otherProvider: unknown): boolean {\n    if (otherProvider instanceof ReCaptchaV3Provider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * App Check provider that can obtain a reCAPTCHA Enterprise token and exchange it\n * for an App Check token.\n *\n * @public\n */\nexport class ReCaptchaEnterpriseProvider implements AppCheckProvider {\n  private _app?: FirebaseApp;\n  private _heartbeatServiceProvider?: Provider<'heartbeat'>;\n  /**\n   * Throttle requests on certain error codes to prevent too many retries\n   * in a short time.\n   */\n  private _throttleData: ThrottleData | null = null;\n  /**\n   * Create a ReCaptchaEnterpriseProvider instance.\n   * @param siteKey - reCAPTCHA Enterprise score-based site key.\n   */\n  constructor(private _siteKey: string) {}\n\n  /**\n   * Returns an App Check token.\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    throwIfThrottled(this._throttleData);\n    // Top-level `getToken()` has already checked that App Check is initialized\n    // and therefore this._app and this._heartbeatServiceProvider are available.\n    const attestedClaimsToken = await getReCAPTCHAToken(this._app!).catch(\n      _e => {\n        // reCaptcha.execute() throws null which is not very descriptive.\n        throw ERROR_FACTORY.create(AppCheckError.RECAPTCHA_ERROR);\n      }\n    );\n    // Check if a failure state was set by the recaptcha \"error-callback\".\n    if (!getStateReference(this._app!).reCAPTCHAState?.succeeded) {\n      throw ERROR_FACTORY.create(AppCheckError.RECAPTCHA_ERROR);\n    }\n    let result;\n    try {\n      result = await exchangeToken(\n        getExchangeRecaptchaEnterpriseTokenRequest(\n          this._app!,\n          attestedClaimsToken\n        ),\n        this._heartbeatServiceProvider!\n      );\n    } catch (e) {\n      if (\n        (e as FirebaseError).code?.includes(AppCheckError.FETCH_STATUS_ERROR)\n      ) {\n        this._throttleData = setBackoff(\n          Number((e as FirebaseError).customData?.httpStatus),\n          this._throttleData\n        );\n        throw ERROR_FACTORY.create(AppCheckError.INITIAL_THROTTLE, {\n          time: getDurationString(\n            this._throttleData.allowRequestsAfter - Date.now()\n          ),\n          httpStatus: this._throttleData.httpStatus\n        });\n      } else {\n        throw e;\n      }\n    }\n    // If successful, clear throttle data.\n    this._throttleData = null;\n    return result;\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n    this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n    initializeRecaptchaEnterprise(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n\n  /**\n   * @internal\n   */\n  isEqual(otherProvider: unknown): boolean {\n    if (otherProvider instanceof ReCaptchaEnterpriseProvider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * Custom provider class.\n * @public\n */\nexport class CustomProvider implements AppCheckProvider {\n  private _app?: FirebaseApp;\n\n  constructor(private _customProviderOptions: CustomProviderOptions) {}\n\n  /**\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    // custom provider\n    const customToken = await this._customProviderOptions.getToken();\n    // Try to extract IAT from custom token, in case this token is not\n    // being newly issued. JWT timestamps are in seconds since epoch.\n    const issuedAtTimeSeconds = issuedAtTime(customToken.token);\n    // Very basic validation, use current timestamp as IAT if JWT\n    // has no `iat` field or value is out of bounds.\n    const issuedAtTimeMillis =\n      issuedAtTimeSeconds !== null &&\n      issuedAtTimeSeconds < Date.now() &&\n      issuedAtTimeSeconds > 0\n        ? issuedAtTimeSeconds * 1000\n        : Date.now();\n\n    return { ...customToken, issuedAtTimeMillis };\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n  }\n\n  /**\n   * @internal\n   */\n  isEqual(otherProvider: unknown): boolean {\n    if (otherProvider instanceof CustomProvider) {\n      return (\n        this._customProviderOptions.getToken.toString() ===\n        otherProvider._customProviderOptions.getToken.toString()\n      );\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * Set throttle data to block requests until after a certain time\n * depending on the failed request's status code.\n * @param httpStatus - Status code of failed request.\n * @param throttleData - `ThrottleData` object containing previous throttle\n * data state.\n * @returns Data about current throttle state and expiration time.\n */\nfunction setBackoff(\n  httpStatus: number,\n  throttleData: ThrottleData | null\n): ThrottleData {\n  /**\n   * Block retries for 1 day for the following error codes:\n   *\n   * 404: Likely malformed URL.\n   *\n   * 403:\n   * - Attestation failed\n   * - Wrong API key\n   * - Project deleted\n   */\n  if (httpStatus === 404 || httpStatus === 403) {\n    return {\n      backoffCount: 1,\n      allowRequestsAfter: Date.now() + ONE_DAY,\n      httpStatus\n    };\n  } else {\n    /**\n     * For all other error codes, the time when it is ok to retry again\n     * is based on exponential backoff.\n     */\n    const backoffCount = throttleData ? throttleData.backoffCount : 0;\n    const backoffMillis = calculateBackoffMillis(backoffCount, 1000, 2);\n    return {\n      backoffCount: backoffCount + 1,\n      allowRequestsAfter: Date.now() + backoffMillis,\n      httpStatus\n    };\n  }\n}\n\nfunction throwIfThrottled(throttleData: ThrottleData | null): void {\n  if (throttleData) {\n    if (Date.now() - throttleData.allowRequestsAfter <= 0) {\n      // If before, throw.\n      throw ERROR_FACTORY.create(AppCheckError.THROTTLED, {\n        time: getDurationString(throttleData.allowRequestsAfter - Date.now()),\n        httpStatus: throttleData.httpStatus\n      });\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheck,\n  AppCheckOptions,\n  AppCheckTokenResult,\n  Unsubscribe,\n  PartialObserver\n} from './public-types';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport {\n  getStateReference,\n  getDebugState,\n  DEFAULT_STATE,\n  setInitialState\n} from './state';\nimport { FirebaseApp, getApp, _getProvider } from '@firebase/app';\nimport { getModularInstance, ErrorFn, NextFn } from '@firebase/util';\nimport { AppCheckService } from './factory';\nimport { AppCheckProvider, ListenerType } from './types';\nimport {\n  getToken as getTokenInternal,\n  getLimitedUseToken as getLimitedUseTokenInternal,\n  addTokenListener,\n  removeTokenListener,\n  isValid,\n  notifyTokenListeners\n} from './internal-api';\nimport { readTokenFromStorage } from './storage';\nimport { getDebugToken, initializeDebugMode, isDebugMode } from './debug';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'app-check': AppCheckService;\n  }\n}\n\nexport {\n  ReCaptchaV3Provider,\n  CustomProvider,\n  ReCaptchaEnterpriseProvider\n} from './providers';\n\n/**\n * Activate App Check for the given app. Can be called only once per app.\n * @param app - the {@link @firebase/app#FirebaseApp} to activate App Check for\n * @param options - App Check initialization options\n * @public\n */\nexport function initializeAppCheck(\n  app: FirebaseApp = getApp(),\n  options: AppCheckOptions\n): AppCheck {\n  app = getModularInstance(app);\n  const provider = _getProvider(app, 'app-check');\n\n  // Ensure initializeDebugMode() is only called once.\n  if (!getDebugState().initialized) {\n    initializeDebugMode();\n  }\n\n  // Log a message containing the debug token when `initializeAppCheck()`\n  // is called in debug mode.\n  if (isDebugMode()) {\n    // Do not block initialization to get the token for the message.\n    void getDebugToken().then(token =>\n      // Not using logger because I don't think we ever want this accidentally hidden.\n      console.log(\n        `App Check debug token: ${token}. You will need to add it to your app's App Check settings in the Firebase console for it to work.`\n      )\n    );\n  }\n\n  if (provider.isInitialized()) {\n    const existingInstance = provider.getImmediate();\n    const initialOptions = provider.getOptions() as unknown as AppCheckOptions;\n    if (\n      initialOptions.isTokenAutoRefreshEnabled ===\n        options.isTokenAutoRefreshEnabled &&\n      initialOptions.provider.isEqual(options.provider)\n    ) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(AppCheckError.ALREADY_INITIALIZED, {\n        appName: app.name\n      });\n    }\n  }\n\n  const appCheck = provider.initialize({ options });\n  _activate(app, options.provider, options.isTokenAutoRefreshEnabled);\n  // If isTokenAutoRefreshEnabled is false, do not send any requests to the\n  // exchange endpoint without an explicit call from the user either directly\n  // or through another Firebase library (storage, functions, etc.)\n  if (getStateReference(app).isTokenAutoRefreshEnabled) {\n    // Adding a listener will start the refresher and fetch a token if needed.\n    // This gets a token ready and prevents a delay when an internal library\n    // requests the token.\n    // Listener function does not need to do anything, its base functionality\n    // of calling getToken() already fetches token and writes it to memory/storage.\n    addTokenListener(appCheck, ListenerType.INTERNAL, () => {});\n  }\n\n  return appCheck;\n}\n\n/**\n * Activate App Check\n * @param app - Firebase app to activate App Check for.\n * @param provider - reCAPTCHA v3 provider or\n * custom token provider.\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\n * refreshes App Check tokens as needed. If undefined, defaults to the\n * value of `app.automaticDataCollectionEnabled`, which defaults to\n * false and can be set in the app config.\n */\nfunction _activate(\n  app: FirebaseApp,\n  provider: AppCheckProvider,\n  isTokenAutoRefreshEnabled?: boolean\n): void {\n  // Create an entry in the APP_CHECK_STATES map. Further changes should\n  // directly mutate this object.\n  const state = setInitialState(app, { ...DEFAULT_STATE });\n\n  state.activated = true;\n  state.provider = provider; // Read cached token from storage if it exists and store it in memory.\n  state.cachedTokenPromise = readTokenFromStorage(app).then(cachedToken => {\n    if (cachedToken && isValid(cachedToken)) {\n      state.token = cachedToken;\n      // notify all listeners with the cached token\n      notifyTokenListeners(app, { token: cachedToken.token });\n    }\n    return cachedToken;\n  });\n\n  // Use value of global `automaticDataCollectionEnabled` (which\n  // itself defaults to false if not specified in config) if\n  // `isTokenAutoRefreshEnabled` param was not provided by user.\n  state.isTokenAutoRefreshEnabled =\n    isTokenAutoRefreshEnabled === undefined\n      ? app.automaticDataCollectionEnabled\n      : isTokenAutoRefreshEnabled;\n\n  state.provider.initialize(app);\n}\n\n/**\n * Set whether App Check will automatically refresh tokens as needed.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\n * refreshes App Check tokens as needed. This overrides any value set\n * during `initializeAppCheck()`.\n * @public\n */\nexport function setTokenAutoRefreshEnabled(\n  appCheckInstance: AppCheck,\n  isTokenAutoRefreshEnabled: boolean\n): void {\n  const app = appCheckInstance.app;\n  const state = getStateReference(app);\n  // This will exist if any product libraries have called\n  // `addTokenListener()`\n  if (state.tokenRefresher) {\n    if (isTokenAutoRefreshEnabled === true) {\n      state.tokenRefresher.start();\n    } else {\n      state.tokenRefresher.stop();\n    }\n  }\n  state.isTokenAutoRefreshEnabled = isTokenAutoRefreshEnabled;\n}\n/**\n * Get the current App Check token. If `forceRefresh` is false, this function first\n * checks for a valid token in memory, then local persistence (IndexedDB).\n * If not found, or if `forceRefresh` is true, it makes a request to the\n * App Check endpoint for a fresh token. That request attaches\n * to the most recent in-flight request if one is present.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param forceRefresh - If true, will always try to fetch a fresh token.\n * If false, will use a cached token if found in storage.\n * @public\n */\nexport async function getToken(\n  appCheckInstance: AppCheck,\n  forceRefresh?: boolean\n): Promise<AppCheckTokenResult> {\n  const result = await getTokenInternal(\n    appCheckInstance as AppCheckService,\n    forceRefresh\n  );\n  if (result.error) {\n    throw result.error;\n  }\n  if (result.internalError) {\n    throw result.internalError;\n  }\n  return { token: result.token };\n}\n\n/**\n * Requests a Firebase App Check token. This method should be used\n * only if you need to authorize requests to a non-Firebase backend.\n *\n * Returns limited-use tokens that are intended for use with your\n * non-Firebase backend endpoints that are protected with\n * <a href=\"https://firebase.google.com/docs/app-check/custom-resource-backend#replay-protection\">\n * Replay Protection</a>. This method\n * does not affect the token generation behavior of the\n * #getAppCheckToken() method.\n *\n * @param appCheckInstance - The App Check service instance.\n * @returns The limited use token.\n * @public\n */\nexport function getLimitedUseToken(\n  appCheckInstance: AppCheck\n): Promise<AppCheckTokenResult> {\n  return getLimitedUseTokenInternal(appCheckInstance as AppCheckService);\n}\n\n/**\n * Registers a listener to changes in the token state. There can be more\n * than one listener registered at the same time for one or more\n * App Check instances. The listeners call back on the UI thread whenever\n * the current token associated with this App Check instance changes.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param observer - An object with `next`, `error`, and `complete`\n * properties. `next` is called with an\n * {@link AppCheckTokenResult}\n * whenever the token changes. `error` is optional and is called if an\n * error is thrown by the listener (the `next` function). `complete`\n * is unused, as the token stream is unending.\n *\n * @returns A function that unsubscribes this listener.\n * @public\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  observer: PartialObserver<AppCheckTokenResult>\n): Unsubscribe;\n/**\n * Registers a listener to changes in the token state. There can be more\n * than one listener registered at the same time for one or more\n * App Check instances. The listeners call back on the UI thread whenever\n * the current token associated with this App Check instance changes.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param onNext - When the token changes, this function is called with an\n * {@link AppCheckTokenResult}.\n * @param onError - Optional. Called if there is an error thrown by the\n * listener (the `onNext` function).\n * @param onCompletion - Currently unused, as the token stream is unending.\n * @returns A function that unsubscribes this listener.\n * @public\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  onNext: (tokenResult: AppCheckTokenResult) => void,\n  onError?: (error: Error) => void,\n  onCompletion?: () => void\n): Unsubscribe;\n/**\n * Wraps `addTokenListener`/`removeTokenListener` methods in an `Observer`\n * pattern for public use.\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  onNextOrObserver:\n    | ((tokenResult: AppCheckTokenResult) => void)\n    | PartialObserver<AppCheckTokenResult>,\n  onError?: (error: Error) => void,\n  /**\n   * NOTE: Although an `onCompletion` callback can be provided, it will\n   * never be called because the token stream is never-ending.\n   * It is added only for API consistency with the observer pattern, which\n   * we follow in JS APIs.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onCompletion?: () => void\n): Unsubscribe {\n  let nextFn: NextFn<AppCheckTokenResult> = () => {};\n  let errorFn: ErrorFn = () => {};\n  if ((onNextOrObserver as PartialObserver<AppCheckTokenResult>).next != null) {\n    nextFn = (\n      onNextOrObserver as PartialObserver<AppCheckTokenResult>\n    ).next!.bind(onNextOrObserver);\n  } else {\n    nextFn = onNextOrObserver as NextFn<AppCheckTokenResult>;\n  }\n  if (\n    (onNextOrObserver as PartialObserver<AppCheckTokenResult>).error != null\n  ) {\n    errorFn = (\n      onNextOrObserver as PartialObserver<AppCheckTokenResult>\n    ).error!.bind(onNextOrObserver);\n  } else if (onError) {\n    errorFn = onError;\n  }\n  addTokenListener(\n    appCheckInstance as AppCheckService,\n    ListenerType.EXTERNAL,\n    nextFn,\n    errorFn\n  );\n  return () => removeTokenListener(appCheckInstance.app, nextFn);\n}\n", "/**\n * The Firebase App Check Web SDK.\n *\n * @remarks\n * Firebase App Check does not work in a Node.js environment using `ReCaptchaV3Provider` or\n * `ReCaptchaEnterpriseProvider`, but can be used in Node.js if you use\n * `CustomProvider` and write your own attestation method.\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerVersion, _registerComponent } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstantiationMode\n} from '@firebase/component';\nimport { _AppCheckComponentName } from './public-types';\nimport { factory, internalFactory } from './factory';\nimport { _AppCheckInternalComponentName } from './types';\nimport { name, version } from '../package.json';\n\n// Used by other Firebase packages.\nexport { _AppCheckInternalComponentName };\n\nexport * from './api';\nexport * from './public-types';\n\nconst APP_CHECK_NAME: _AppCheckComponentName = 'app-check';\nconst APP_CHECK_NAME_INTERNAL: _AppCheckInternalComponentName =\n  'app-check-internal';\nfunction registerAppCheck(): void {\n  // The public interface\n  _registerComponent(\n    new Component(\n      APP_CHECK_NAME,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const heartbeatServiceProvider = container.getProvider('heartbeat');\n        return factory(app, heartbeatServiceProvider);\n      },\n      ComponentType.PUBLIC\n    )\n      .setInstantiationMode(InstantiationMode.EXPLICIT)\n      /**\n       * Initialize app-check-internal after app-check is initialized to make AppCheck available to\n       * other Firebase SDKs\n       */\n      .setInstanceCreatedCallback(\n        (container, _identifier, _appcheckService) => {\n          container.getProvider(APP_CHECK_NAME_INTERNAL).initialize();\n        }\n      )\n  );\n\n  // The internal interface used by other Firebase products\n  _registerComponent(\n    new Component(\n      APP_CHECK_NAME_INTERNAL,\n      container => {\n        const appCheck = container.getProvider('app-check').getImmediate();\n        return internalFactory(appCheck);\n      },\n      ComponentType.PUBLIC\n    ).setInstantiationMode(InstantiationMode.EXPLICIT)\n  );\n\n  registerVersion(name, version);\n}\n\nregisterAppCheck();\n"],
  "mappings": "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",
  "names": ["getToken", "getLimitedUseToken", "grecaptcha", "reCAPTCHAState", "getReCAPTCHAToken", "initializeRecaptchaV3", "initializeRecaptchaEnterprise", "getTokenInternal", "getLimitedUseTokenInternal"]
}
