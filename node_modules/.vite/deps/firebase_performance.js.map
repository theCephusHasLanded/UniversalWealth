{
  "version": 3,
  "sources": ["../../web-vitals/dist/web-vitals.attribution.js", "../../@firebase/performance/src/constants.ts", "../../@firebase/performance/src/utils/errors.ts", "../../@firebase/performance/src/utils/console_logger.ts", "../../@firebase/performance/src/services/api_service.ts", "../../@firebase/performance/src/services/iid_service.ts", "../../@firebase/performance/src/utils/string_merger.ts", "../../@firebase/performance/src/services/settings_service.ts", "../../@firebase/performance/src/utils/attributes_utils.ts", "../../@firebase/performance/src/utils/app_utils.ts", "../../@firebase/performance/src/services/remote_config_service.ts", "../../@firebase/performance/src/services/initialization_service.ts", "../../@firebase/performance/src/services/transport_service.ts", "../../@firebase/performance/src/services/perf_logger.ts", "../../@firebase/performance/src/resources/network_request.ts", "../../@firebase/performance/src/utils/metric_utils.ts", "../../@firebase/performance/src/resources/trace.ts", "../../@firebase/performance/src/services/oob_resources_service.ts", "../../@firebase/performance/src/controllers/perf.ts", "../../@firebase/performance/src/index.ts"],
  "sourcesContent": ["var t,e,n=function(){var t=self.performance&&performance.getEntriesByType&&performance.getEntriesByType(\"navigation\")[0];if(t&&t.responseStart>0&&t.responseStart<performance.now())return t},r=function(t){if(\"loading\"===document.readyState)return\"loading\";var e=n();if(e){if(t<e.domInteractive)return\"loading\";if(0===e.domContentLoadedEventStart||t<e.domContentLoadedEventStart)return\"dom-interactive\";if(0===e.domComplete||t<e.domComplete)return\"dom-content-loaded\"}return\"complete\"},i=function(t){var e=t.nodeName;return 1===t.nodeType?e.toLowerCase():e.toUpperCase().replace(/^#/,\"\")},a=function(t,e){var n=\"\";try{for(;t&&9!==t.nodeType;){var r=t,a=r.id?\"#\"+r.id:i(r)+(r.classList&&r.classList.value&&r.classList.value.trim()&&r.classList.value.trim().length?\".\"+r.classList.value.trim().replace(/\\s+/g,\".\"):\"\");if(n.length+a.length>(e||100)-1)return n||a;if(n=n?a+\">\"+n:a,r.id)break;t=r.parentNode}}catch(t){}return n},o=-1,c=function(){return o},u=function(t){addEventListener(\"pageshow\",(function(e){e.persisted&&(o=e.timeStamp,t(e))}),!0)},s=function(){var t=n();return t&&t.activationStart||0},f=function(t,e){var r=n(),i=\"navigate\";c()>=0?i=\"back-forward-cache\":r&&(document.prerendering||s()>0?i=\"prerender\":document.wasDiscarded?i=\"restore\":r.type&&(i=r.type.replace(/_/g,\"-\")));return{name:t,value:void 0===e?-1:e,rating:\"good\",delta:0,entries:[],id:\"v4-\".concat(Date.now(),\"-\").concat(Math.floor(8999999999999*Math.random())+1e12),navigationType:i}},d=function(t,e,n){try{if(PerformanceObserver.supportedEntryTypes.includes(t)){var r=new PerformanceObserver((function(t){Promise.resolve().then((function(){e(t.getEntries())}))}));return r.observe(Object.assign({type:t,buffered:!0},n||{})),r}}catch(t){}},l=function(t,e,n,r){var i,a;return function(o){e.value>=0&&(o||r)&&((a=e.value-(i||0))||void 0===i)&&(i=e.value,e.delta=a,e.rating=function(t,e){return t>e[1]?\"poor\":t>e[0]?\"needs-improvement\":\"good\"}(e.value,n),t(e))}},m=function(t){requestAnimationFrame((function(){return requestAnimationFrame((function(){return t()}))}))},p=function(t){document.addEventListener(\"visibilitychange\",(function(){\"hidden\"===document.visibilityState&&t()}))},v=function(t){var e=!1;return function(){e||(t(),e=!0)}},g=-1,h=function(){return\"hidden\"!==document.visibilityState||document.prerendering?1/0:0},T=function(t){\"hidden\"===document.visibilityState&&g>-1&&(g=\"visibilitychange\"===t.type?t.timeStamp:0,E())},y=function(){addEventListener(\"visibilitychange\",T,!0),addEventListener(\"prerenderingchange\",T,!0)},E=function(){removeEventListener(\"visibilitychange\",T,!0),removeEventListener(\"prerenderingchange\",T,!0)},S=function(){return g<0&&(g=h(),y(),u((function(){setTimeout((function(){g=h(),y()}),0)}))),{get firstHiddenTime(){return g}}},b=function(t){document.prerendering?addEventListener(\"prerenderingchange\",(function(){return t()}),!0):t()},L=[1800,3e3],C=function(t,e){e=e||{},b((function(){var n,r=S(),i=f(\"FCP\"),a=d(\"paint\",(function(t){t.forEach((function(t){\"first-contentful-paint\"===t.name&&(a.disconnect(),t.startTime<r.firstHiddenTime&&(i.value=Math.max(t.startTime-s(),0),i.entries.push(t),n(!0)))}))}));a&&(n=l(t,i,L,e.reportAllChanges),u((function(r){i=f(\"FCP\"),n=l(t,i,L,e.reportAllChanges),m((function(){i.value=performance.now()-r.timeStamp,n(!0)}))})))}))},M=[.1,.25],D=function(t,e){!function(t,e){e=e||{},C(v((function(){var n,r=f(\"CLS\",0),i=0,a=[],o=function(t){t.forEach((function(t){if(!t.hadRecentInput){var e=a[0],n=a[a.length-1];i&&t.startTime-n.startTime<1e3&&t.startTime-e.startTime<5e3?(i+=t.value,a.push(t)):(i=t.value,a=[t])}})),i>r.value&&(r.value=i,r.entries=a,n())},c=d(\"layout-shift\",o);c&&(n=l(t,r,M,e.reportAllChanges),p((function(){o(c.takeRecords()),n(!0)})),u((function(){i=0,r=f(\"CLS\",0),n=l(t,r,M,e.reportAllChanges),m((function(){return n()}))})),setTimeout(n,0))})))}((function(e){var n=function(t){var e,n={};if(t.entries.length){var i=t.entries.reduce((function(t,e){return t&&t.value>e.value?t:e}));if(i&&i.sources&&i.sources.length){var o=(e=i.sources).find((function(t){return t.node&&1===t.node.nodeType}))||e[0];o&&(n={largestShiftTarget:a(o.node),largestShiftTime:i.startTime,largestShiftValue:i.value,largestShiftSource:o,largestShiftEntry:i,loadState:r(i.startTime)})}}return Object.assign(t,{attribution:n})}(e);t(n)}),e)},w=function(t,e){C((function(e){var i=function(t){var e={timeToFirstByte:0,firstByteToFCP:t.value,loadState:r(c())};if(t.entries.length){var i=n(),a=t.entries[t.entries.length-1];if(i){var o=i.activationStart||0,u=Math.max(0,i.responseStart-o);e={timeToFirstByte:u,firstByteToFCP:t.value-u,loadState:r(t.entries[0].startTime),navigationEntry:i,fcpEntry:a}}}return Object.assign(t,{attribution:e})}(e);t(i)}),e)},x=0,I=1/0,k=0,A=function(t){t.forEach((function(t){t.interactionId&&(I=Math.min(I,t.interactionId),k=Math.max(k,t.interactionId),x=k?(k-I)/7+1:0)}))},F=function(){return t?x:performance.interactionCount||0},P=function(){\"interactionCount\"in performance||t||(t=d(\"event\",A,{type:\"event\",buffered:!0,durationThreshold:0}))},B=[],O=new Map,R=0,j=function(){var t=Math.min(B.length-1,Math.floor((F()-R)/50));return B[t]},q=[],H=function(t){if(q.forEach((function(e){return e(t)})),t.interactionId||\"first-input\"===t.entryType){var e=B[B.length-1],n=O.get(t.interactionId);if(n||B.length<10||t.duration>e.latency){if(n)t.duration>n.latency?(n.entries=[t],n.latency=t.duration):t.duration===n.latency&&t.startTime===n.entries[0].startTime&&n.entries.push(t);else{var r={id:t.interactionId,latency:t.duration,entries:[t]};O.set(r.id,r),B.push(r)}B.sort((function(t,e){return e.latency-t.latency})),B.length>10&&B.splice(10).forEach((function(t){return O.delete(t.id)}))}}},N=function(t){var e=self.requestIdleCallback||self.setTimeout,n=-1;return t=v(t),\"hidden\"===document.visibilityState?t():(n=e(t),p(t)),n},W=[200,500],z=function(t,e){\"PerformanceEventTiming\"in self&&\"interactionId\"in PerformanceEventTiming.prototype&&(e=e||{},b((function(){var n;P();var r,i=f(\"INP\"),a=function(t){N((function(){t.forEach(H);var e=j();e&&e.latency!==i.value&&(i.value=e.latency,i.entries=e.entries,r())}))},o=d(\"event\",a,{durationThreshold:null!==(n=e.durationThreshold)&&void 0!==n?n:40});r=l(t,i,W,e.reportAllChanges),o&&(o.observe({type:\"first-input\",buffered:!0}),p((function(){a(o.takeRecords()),r(!0)})),u((function(){R=F(),B.length=0,O.clear(),i=f(\"INP\"),r=l(t,i,W,e.reportAllChanges)})))})))},U=[],V=[],_=0,G=new WeakMap,J=new Map,K=-1,Q=function(t){U=U.concat(t),X()},X=function(){K<0&&(K=N(Y))},Y=function(){J.size>10&&J.forEach((function(t,e){O.has(e)||J.delete(e)}));var t=B.map((function(t){return G.get(t.entries[0])})),e=V.length-50;V=V.filter((function(n,r){return r>=e||t.includes(n)}));for(var n=new Set,r=0;r<V.length;r++){var i=V[r];nt(i.startTime,i.processingEnd).forEach((function(t){n.add(t)}))}var a=U.length-1-50;U=U.filter((function(t,e){return t.startTime>_&&e>a||n.has(t)})),K=-1};q.push((function(t){t.interactionId&&t.target&&!J.has(t.interactionId)&&J.set(t.interactionId,t.target)}),(function(t){var e,n=t.startTime+t.duration;_=Math.max(_,t.processingEnd);for(var r=V.length-1;r>=0;r--){var i=V[r];if(Math.abs(n-i.renderTime)<=8){(e=i).startTime=Math.min(t.startTime,e.startTime),e.processingStart=Math.min(t.processingStart,e.processingStart),e.processingEnd=Math.max(t.processingEnd,e.processingEnd),e.entries.push(t);break}}e||(e={startTime:t.startTime,processingStart:t.processingStart,processingEnd:t.processingEnd,renderTime:n,entries:[t]},V.push(e)),(t.interactionId||\"first-input\"===t.entryType)&&G.set(t,e),X()}));var Z,$,tt,et,nt=function(t,e){for(var n,r=[],i=0;n=U[i];i++)if(!(n.startTime+n.duration<t)){if(n.startTime>e)break;r.push(n)}return r},rt=function(t,n){e||(e=d(\"long-animation-frame\",Q)),z((function(e){var n=function(t){var e=t.entries[0],n=G.get(e),i=e.processingStart,o=n.processingEnd,c=n.entries.sort((function(t,e){return t.processingStart-e.processingStart})),u=nt(e.startTime,o),s=t.entries.find((function(t){return t.target})),f=s&&s.target||J.get(e.interactionId),d=[e.startTime+e.duration,o].concat(u.map((function(t){return t.startTime+t.duration}))),l=Math.max.apply(Math,d),m={interactionTarget:a(f),interactionTargetElement:f,interactionType:e.name.startsWith(\"key\")?\"keyboard\":\"pointer\",interactionTime:e.startTime,nextPaintTime:l,processedEventEntries:c,longAnimationFrameEntries:u,inputDelay:i-e.startTime,processingDuration:o-i,presentationDelay:Math.max(l-o,0),loadState:r(e.startTime)};return Object.assign(t,{attribution:m})}(e);t(n)}),n)},it=[2500,4e3],at={},ot=function(t,e){!function(t,e){e=e||{},b((function(){var n,r=S(),i=f(\"LCP\"),a=function(t){e.reportAllChanges||(t=t.slice(-1)),t.forEach((function(t){t.startTime<r.firstHiddenTime&&(i.value=Math.max(t.startTime-s(),0),i.entries=[t],n())}))},o=d(\"largest-contentful-paint\",a);if(o){n=l(t,i,it,e.reportAllChanges);var c=v((function(){at[i.id]||(a(o.takeRecords()),o.disconnect(),at[i.id]=!0,n(!0))}));[\"keydown\",\"click\"].forEach((function(t){addEventListener(t,(function(){return N(c)}),{once:!0,capture:!0})})),p(c),u((function(r){i=f(\"LCP\"),n=l(t,i,it,e.reportAllChanges),m((function(){i.value=performance.now()-r.timeStamp,at[i.id]=!0,n(!0)}))}))}}))}((function(e){var r=function(t){var e={timeToFirstByte:0,resourceLoadDelay:0,resourceLoadDuration:0,elementRenderDelay:t.value};if(t.entries.length){var r=n();if(r){var i=r.activationStart||0,o=t.entries[t.entries.length-1],c=o.url&&performance.getEntriesByType(\"resource\").filter((function(t){return t.name===o.url}))[0],u=Math.max(0,r.responseStart-i),s=Math.max(u,c?(c.requestStart||c.startTime)-i:0),f=Math.max(s,c?c.responseEnd-i:0),d=Math.max(f,o.startTime-i);e={element:a(o.element),timeToFirstByte:u,resourceLoadDelay:s-u,resourceLoadDuration:f-s,elementRenderDelay:d-f,navigationEntry:r,lcpEntry:o},o.url&&(e.url=o.url),c&&(e.lcpResourceEntry=c)}}return Object.assign(t,{attribution:e})}(e);t(r)}),e)},ct=[800,1800],ut=function t(e){document.prerendering?b((function(){return t(e)})):\"complete\"!==document.readyState?addEventListener(\"load\",(function(){return t(e)}),!0):setTimeout(e,0)},st=function(t,e){e=e||{};var r=f(\"TTFB\"),i=l(t,r,ct,e.reportAllChanges);ut((function(){var a=n();a&&(r.value=Math.max(a.responseStart-s(),0),r.entries=[a],i(!0),u((function(){r=f(\"TTFB\",0),(i=l(t,r,ct,e.reportAllChanges))(!0)})))}))},ft=function(t,e){st((function(e){var n=function(t){var e={waitingDuration:0,cacheDuration:0,dnsDuration:0,connectionDuration:0,requestDuration:0};if(t.entries.length){var n=t.entries[0],r=n.activationStart||0,i=Math.max((n.workerStart||n.fetchStart)-r,0),a=Math.max(n.domainLookupStart-r,0),o=Math.max(n.connectStart-r,0),c=Math.max(n.connectEnd-r,0);e={waitingDuration:i,cacheDuration:a-i,dnsDuration:o-a,connectionDuration:c-o,requestDuration:t.value-c,navigationEntry:n}}return Object.assign(t,{attribution:e})}(e);t(n)}),e)},dt={passive:!0,capture:!0},lt=new Date,mt=function(t,e){Z||(Z=e,$=t,tt=new Date,gt(removeEventListener),pt())},pt=function(){if($>=0&&$<tt-lt){var t={entryType:\"first-input\",name:Z.type,target:Z.target,cancelable:Z.cancelable,startTime:Z.timeStamp,processingStart:Z.timeStamp+$};et.forEach((function(e){e(t)})),et=[]}},vt=function(t){if(t.cancelable){var e=(t.timeStamp>1e12?new Date:performance.now())-t.timeStamp;\"pointerdown\"==t.type?function(t,e){var n=function(){mt(t,e),i()},r=function(){i()},i=function(){removeEventListener(\"pointerup\",n,dt),removeEventListener(\"pointercancel\",r,dt)};addEventListener(\"pointerup\",n,dt),addEventListener(\"pointercancel\",r,dt)}(e,t):mt(e,t)}},gt=function(t){[\"mousedown\",\"keydown\",\"touchstart\",\"pointerdown\"].forEach((function(e){return t(e,vt,dt)}))},ht=[100,300],Tt=function(t,e){e=e||{},b((function(){var n,r=S(),i=f(\"FID\"),a=function(t){t.startTime<r.firstHiddenTime&&(i.value=t.processingStart-t.startTime,i.entries.push(t),n(!0))},o=function(t){t.forEach(a)},c=d(\"first-input\",o);n=l(t,i,ht,e.reportAllChanges),c&&(p(v((function(){o(c.takeRecords()),c.disconnect()}))),u((function(){var r;i=f(\"FID\"),n=l(t,i,ht,e.reportAllChanges),et=[],$=-1,Z=null,gt(addEventListener),r=a,et.push(r),pt()})))}))},yt=function(t,e){Tt((function(e){var n=function(t){var e=t.entries[0],n={eventTarget:a(e.target),eventType:e.name,eventTime:e.startTime,eventEntry:e,loadState:r(e.startTime)};return Object.assign(t,{attribution:n})}(e);t(n)}),e)};export{M as CLSThresholds,L as FCPThresholds,ht as FIDThresholds,W as INPThresholds,it as LCPThresholds,ct as TTFBThresholds,D as onCLS,w as onFCP,yt as onFID,rt as onINP,ot as onLCP,ft as onTTFB};\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../package.json';\n\nexport const SDK_VERSION = version;\n/** The prefix for start User Timing marks used for creating Traces. */\nexport const TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';\n/** The prefix for stop User Timing marks used for creating Traces. */\nexport const TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';\n/** The prefix for User Timing measure used for creating Traces. */\nexport const TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';\n/** The prefix for out of the box page load Trace name. */\nexport const OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';\n\nexport const FIRST_PAINT_COUNTER_NAME = '_fp';\n\nexport const FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';\n\nexport const FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';\n\nexport const LARGEST_CONTENTFUL_PAINT_METRIC_NAME = '_lcp';\nexport const LARGEST_CONTENTFUL_PAINT_ATTRIBUTE_NAME = 'lcp_element';\n\nexport const INTERACTION_TO_NEXT_PAINT_METRIC_NAME = '_inp';\nexport const INTERACTION_TO_NEXT_PAINT_ATTRIBUTE_NAME = 'inp_interactionTarget';\n\nexport const CUMULATIVE_LAYOUT_SHIFT_METRIC_NAME = '_cls';\nexport const CUMULATIVE_LAYOUT_SHIFT_ATTRIBUTE_NAME = 'cls_largestShiftTarget';\n\nexport const CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';\n\nexport const CONFIG_EXPIRY_LOCAL_STORAGE_KEY =\n  '@firebase/performance/configexpire';\n\nexport const SERVICE = 'performance';\nexport const SERVICE_NAME = 'Performance';\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from '../constants';\n\nexport const enum ErrorCode {\n  TRACE_STARTED_BEFORE = 'trace started',\n  TRACE_STOPPED_BEFORE = 'trace stopped',\n  NONPOSITIVE_TRACE_START_TIME = 'nonpositive trace startTime',\n  NONPOSITIVE_TRACE_DURATION = 'nonpositive trace duration',\n  NO_WINDOW = 'no window',\n  NO_APP_ID = 'no app id',\n  NO_PROJECT_ID = 'no project id',\n  NO_API_KEY = 'no api key',\n  INVALID_CC_LOG = 'invalid cc log',\n  FB_NOT_DEFAULT = 'FB not default',\n  RC_NOT_OK = 'RC response not ok',\n  INVALID_ATTRIBUTE_NAME = 'invalid attribute name',\n  INVALID_ATTRIBUTE_VALUE = 'invalid attribute value',\n  INVALID_CUSTOM_METRIC_NAME = 'invalid custom metric name',\n  INVALID_STRING_MERGER_PARAMETER = 'invalid String merger input',\n  ALREADY_INITIALIZED = 'already initialized'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.TRACE_STARTED_BEFORE]: 'Trace {$traceName} was started before.',\n  [ErrorCode.TRACE_STOPPED_BEFORE]: 'Trace {$traceName} is not running.',\n  [ErrorCode.NONPOSITIVE_TRACE_START_TIME]:\n    'Trace {$traceName} startTime should be positive.',\n  [ErrorCode.NONPOSITIVE_TRACE_DURATION]:\n    'Trace {$traceName} duration should be positive.',\n  [ErrorCode.NO_WINDOW]: 'Window is not available.',\n  [ErrorCode.NO_APP_ID]: 'App id is not available.',\n  [ErrorCode.NO_PROJECT_ID]: 'Project id is not available.',\n  [ErrorCode.NO_API_KEY]: 'Api key is not available.',\n  [ErrorCode.INVALID_CC_LOG]: 'Attempted to queue invalid cc event',\n  [ErrorCode.FB_NOT_DEFAULT]:\n    'Performance can only start when Firebase app instance is the default one.',\n  [ErrorCode.RC_NOT_OK]: 'RC response is not ok',\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]:\n    'Attribute name {$attributeName} is invalid.',\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]:\n    'Attribute value {$attributeValue} is invalid.',\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]:\n    'Custom metric name {$customMetricName} is invalid',\n  [ErrorCode.INVALID_STRING_MERGER_PARAMETER]:\n    'Input for String merger is invalid, contact support team to resolve.',\n  [ErrorCode.ALREADY_INITIALIZED]:\n    'initializePerformance() has already been called with ' +\n    'different options. To avoid this error, call initializePerformance() with the ' +\n    'same options as when it was originally called, or call getPerformance() to return the' +\n    ' already initialized instance.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.TRACE_STARTED_BEFORE]: { traceName: string };\n  [ErrorCode.TRACE_STOPPED_BEFORE]: { traceName: string };\n  [ErrorCode.NONPOSITIVE_TRACE_START_TIME]: { traceName: string };\n  [ErrorCode.NONPOSITIVE_TRACE_DURATION]: { traceName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]: { attributeName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]: { attributeValue: string };\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]: { customMetricName: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { SERVICE_NAME } from '../constants';\n\nexport const consoleLogger = new Logger(SERVICE_NAME);\nconsoleLogger.logLevel = LogLevel.INFO;\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { isIndexedDBAvailable, areCookiesEnabled } from '@firebase/util';\nimport { consoleLogger } from '../utils/console_logger';\nimport {\n  CLSMetricWithAttribution,\n  INPMetricWithAttribution,\n  LCPMetricWithAttribution,\n  onCLS as vitalsOnCLS,\n  onINP as vitalsOnINP,\n  onLCP as vitalsOnLCP\n} from 'web-vitals/attribution';\n\ndeclare global {\n  interface Window {\n    PerformanceObserver: typeof PerformanceObserver;\n    perfMetrics?: { onFirstInputDelay(fn: (fid: number) => void): void };\n  }\n}\n\nlet apiInstance: Api | undefined;\nlet windowInstance: Window | undefined;\n\nexport type EntryType =\n  | 'mark'\n  | 'measure'\n  | 'paint'\n  | 'resource'\n  | 'frame'\n  | 'navigation';\n\n/**\n * This class holds a reference to various browser related objects injected by\n * set methods.\n */\nexport class Api {\n  private readonly performance: Performance;\n  /** PerformanceObserver constructor function. */\n  private readonly PerformanceObserver: typeof PerformanceObserver;\n  private readonly windowLocation: Location;\n  readonly onFirstInputDelay?: (fn: (fid: number) => void) => void;\n  readonly onLCP: (fn: (metric: LCPMetricWithAttribution) => void) => void;\n  readonly onINP: (fn: (metric: INPMetricWithAttribution) => void) => void;\n  readonly onCLS: (fn: (metric: CLSMetricWithAttribution) => void) => void;\n  readonly localStorage?: Storage;\n  readonly document: Document;\n  readonly navigator: Navigator;\n\n  constructor(readonly window?: Window) {\n    if (!window) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_WINDOW);\n    }\n    this.performance = window.performance;\n    this.PerformanceObserver = window.PerformanceObserver;\n    this.windowLocation = window.location;\n    this.navigator = window.navigator;\n    this.document = window.document;\n    if (this.navigator && this.navigator.cookieEnabled) {\n      // If user blocks cookies on the browser, accessing localStorage will\n      // throw an exception.\n      this.localStorage = window.localStorage;\n    }\n    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\n      this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;\n    }\n    this.onLCP = vitalsOnLCP;\n    this.onINP = vitalsOnINP;\n    this.onCLS = vitalsOnCLS;\n  }\n\n  getUrl(): string {\n    // Do not capture the string query part of url.\n    return this.windowLocation.href.split('?')[0];\n  }\n\n  mark(name: string): void {\n    if (!this.performance || !this.performance.mark) {\n      return;\n    }\n    this.performance.mark(name);\n  }\n\n  measure(measureName: string, mark1: string, mark2: string): void {\n    if (!this.performance || !this.performance.measure) {\n      return;\n    }\n    this.performance.measure(measureName, mark1, mark2);\n  }\n\n  getEntriesByType(type: EntryType): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByType) {\n      return [];\n    }\n    return this.performance.getEntriesByType(type);\n  }\n\n  getEntriesByName(name: string): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByName) {\n      return [];\n    }\n    return this.performance.getEntriesByName(name);\n  }\n\n  getTimeOrigin(): number {\n    // Polyfill the time origin with performance.timing.navigationStart.\n    return (\n      this.performance &&\n      (this.performance.timeOrigin || this.performance.timing.navigationStart)\n    );\n  }\n\n  requiredApisAvailable(): boolean {\n    if (!fetch || !Promise || !areCookiesEnabled()) {\n      consoleLogger.info(\n        'Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.'\n      );\n      return false;\n    }\n\n    if (!isIndexedDBAvailable()) {\n      consoleLogger.info('IndexedDB is not supported by current browser');\n      return false;\n    }\n    return true;\n  }\n\n  setupObserver(\n    entryType: EntryType,\n    callback: (entry: PerformanceEntry) => void\n  ): void {\n    if (!this.PerformanceObserver) {\n      return;\n    }\n    const observer = new this.PerformanceObserver(list => {\n      for (const entry of list.getEntries()) {\n        // `entry` is a PerformanceEntry instance.\n        callback(entry);\n      }\n    });\n\n    // Start observing the entry types you care about.\n    observer.observe({ entryTypes: [entryType] });\n  }\n\n  static getInstance(): Api {\n    if (apiInstance === undefined) {\n      apiInstance = new Api(windowInstance);\n    }\n    return apiInstance;\n  }\n}\n\nexport function setupApi(window: Window): void {\n  windowInstance = window;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\n\nlet iid: string | undefined;\nlet authToken: string | undefined;\n\nexport function getIidPromise(\n  installationsService: _FirebaseInstallationsInternal\n): Promise<string> {\n  const iidPromise = installationsService.getId();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  iidPromise.then((iidVal: string) => {\n    iid = iidVal;\n  });\n  return iidPromise;\n}\n\n// This method should be used after the iid is retrieved by getIidPromise method.\nexport function getIid(): string | undefined {\n  return iid;\n}\n\nexport function getAuthTokenPromise(\n  installationsService: _FirebaseInstallationsInternal\n): Promise<string> {\n  const authTokenPromise = installationsService.getToken();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  authTokenPromise.then((authTokenVal: string) => {\n    authToken = authTokenVal;\n  });\n  return authTokenPromise;\n}\n\nexport function getAuthenticationToken(): string | undefined {\n  return authToken;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from './errors';\n\nexport function mergeStrings(part1: string, part2: string): string {\n  const sizeDiff = part1.length - part2.length;\n  if (sizeDiff < 0 || sizeDiff > 1) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_STRING_MERGER_PARAMETER);\n  }\n\n  const resultArray = [];\n  for (let i = 0; i < part1.length; i++) {\n    resultArray.push(part1.charAt(i));\n    if (part2.length > i) {\n      resultArray.push(part2.charAt(i));\n    }\n  }\n\n  return resultArray.join('');\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { mergeStrings } from '../utils/string_merger';\n\nlet settingsServiceInstance: SettingsService | undefined;\n\nexport class SettingsService {\n  // The variable which controls logging of automatic traces and HTTP/S network monitoring.\n  instrumentationEnabled = true;\n\n  // The variable which controls logging of custom traces.\n  dataCollectionEnabled = true;\n\n  // Configuration flags set through remote config.\n  loggingEnabled = false;\n  // Sampling rate between 0 and 1.\n  tracesSamplingRate = 1;\n  networkRequestsSamplingRate = 1;\n\n  // Address of logging service.\n  logEndPointUrl =\n    'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto';\n  // Performance event transport endpoint URL which should be compatible with proto3.\n  // New Address for transport service, not configurable via Remote Config.\n  flTransportEndpointUrl = mergeStrings(\n    'hts/frbslgigp.ogepscmv/ieo/eaylg',\n    'tp:/ieaeogn-agolai.o/1frlglgc/o'\n  );\n\n  transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV');\n\n  // Source type for performance event logs.\n  logSource = 462;\n\n  // Flags which control per session logging of traces and network requests.\n  logTraceAfterSampling = false;\n  logNetworkAfterSampling = false;\n\n  // TTL of config retrieved from remote config in hours.\n  configTimeToLive = 12;\n\n  getFlTransportFullUrl(): string {\n    return this.flTransportEndpointUrl.concat('?key=', this.transportKey);\n  }\n\n  static getInstance(): SettingsService {\n    if (settingsServiceInstance === undefined) {\n      settingsServiceInstance = new SettingsService();\n    }\n    return settingsServiceInstance;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\n\n// The values and orders of the following enums should not be changed.\nconst enum ServiceWorkerStatus {\n  UNKNOWN = 0,\n  UNSUPPORTED = 1,\n  CONTROLLED = 2,\n  UNCONTROLLED = 3\n}\n\nexport enum VisibilityState {\n  UNKNOWN = 0,\n  VISIBLE = 1,\n  HIDDEN = 2\n}\n\nconst enum EffectiveConnectionType {\n  UNKNOWN = 0,\n  CONNECTION_SLOW_2G = 1,\n  CONNECTION_2G = 2,\n  CONNECTION_3G = 3,\n  CONNECTION_4G = 4\n}\n\ntype ConnectionType =\n  | 'bluetooth'\n  | 'cellular'\n  | 'ethernet'\n  | 'mixed'\n  | 'none'\n  | 'other'\n  | 'unknown'\n  | 'wifi';\n\n/**\n * NetworkInformation\n * This API is not well supported in all major browsers, so TypeScript does not provide types for it.\n *\n * ref: https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation\n */\ninterface NetworkInformation extends EventTarget {\n  readonly type: ConnectionType;\n}\n\ninterface NetworkInformationWithEffectiveType extends NetworkInformation {\n  readonly effectiveType?: 'slow-2g' | '2g' | '3g' | '4g';\n}\n\ninterface NavigatorWithConnection extends Navigator {\n  readonly connection: NetworkInformationWithEffectiveType;\n}\n\nconst RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];\nconst ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\\\w*$');\nconst MAX_ATTRIBUTE_NAME_LENGTH = 40;\nconst MAX_ATTRIBUTE_VALUE_LENGTH = 100;\n\nexport function getServiceWorkerStatus(): ServiceWorkerStatus {\n  const navigator = Api.getInstance().navigator;\n  if (navigator?.serviceWorker) {\n    if (navigator.serviceWorker.controller) {\n      return ServiceWorkerStatus.CONTROLLED;\n    } else {\n      return ServiceWorkerStatus.UNCONTROLLED;\n    }\n  } else {\n    return ServiceWorkerStatus.UNSUPPORTED;\n  }\n}\n\nexport function getVisibilityState(): VisibilityState {\n  const document = Api.getInstance().document;\n  const visibilityState = document.visibilityState;\n  switch (visibilityState) {\n    case 'visible':\n      return VisibilityState.VISIBLE;\n    case 'hidden':\n      return VisibilityState.HIDDEN;\n    default:\n      return VisibilityState.UNKNOWN;\n  }\n}\n\nexport function getEffectiveConnectionType(): EffectiveConnectionType {\n  const navigator = Api.getInstance().navigator;\n  const navigatorConnection = (navigator as NavigatorWithConnection).connection;\n  const effectiveType =\n    navigatorConnection && navigatorConnection.effectiveType;\n  switch (effectiveType) {\n    case 'slow-2g':\n      return EffectiveConnectionType.CONNECTION_SLOW_2G;\n    case '2g':\n      return EffectiveConnectionType.CONNECTION_2G;\n    case '3g':\n      return EffectiveConnectionType.CONNECTION_3G;\n    case '4g':\n      return EffectiveConnectionType.CONNECTION_4G;\n    default:\n      return EffectiveConnectionType.UNKNOWN;\n  }\n}\n\nexport function isValidCustomAttributeName(name: string): boolean {\n  if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {\n    return false;\n  }\n  const matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(prefix =>\n    name.startsWith(prefix)\n  );\n  return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);\n}\n\nexport function isValidCustomAttributeValue(value: string): boolean {\n  return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from './errors';\nimport { FirebaseApp } from '@firebase/app';\n\nexport function getAppId(firebaseApp: FirebaseApp): string {\n  const appId = firebaseApp.options?.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(ErrorCode.NO_APP_ID);\n  }\n  return appId;\n}\n\nexport function getProjectId(firebaseApp: FirebaseApp): string {\n  const projectId = firebaseApp.options?.projectId;\n  if (!projectId) {\n    throw ERROR_FACTORY.create(ErrorCode.NO_PROJECT_ID);\n  }\n  return projectId;\n}\n\nexport function getApiKey(firebaseApp: FirebaseApp): string {\n  const apiKey = firebaseApp.options?.apiKey;\n  if (!apiKey) {\n    throw ERROR_FACTORY.create(ErrorCode.NO_API_KEY);\n  }\n  return apiKey;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n  CONFIG_LOCAL_STORAGE_KEY,\n  SDK_VERSION\n} from '../constants';\nimport { consoleLogger } from '../utils/console_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\n\nimport { Api } from './api_service';\nimport { getAuthTokenPromise } from './iid_service';\nimport { SettingsService } from './settings_service';\nimport { PerformanceController } from '../controllers/perf';\nimport { getProjectId, getApiKey, getAppId } from '../utils/app_utils';\n\nconst REMOTE_CONFIG_SDK_VERSION = '0.0.1';\n\ninterface SecondaryConfig {\n  loggingEnabled?: boolean;\n  logSource?: number;\n  logEndPointUrl?: string;\n  transportKey?: string;\n  tracesSamplingRate?: number;\n  networkRequestsSamplingRate?: number;\n}\n\n// These values will be used if the remote config object is successfully\n// retrieved, but the template does not have these fields.\nconst DEFAULT_CONFIGS: SecondaryConfig = {\n  loggingEnabled: true\n};\n\n/* eslint-disable camelcase */\ninterface RemoteConfigTemplate {\n  fpr_enabled?: string;\n  fpr_log_source?: string;\n  fpr_log_endpoint_url?: string;\n  fpr_log_transport_key?: string;\n  fpr_log_transport_web_percent?: string;\n  fpr_vc_network_request_sampling_rate?: string;\n  fpr_vc_trace_sampling_rate?: string;\n  fpr_vc_session_sampling_rate?: string;\n}\n/* eslint-enable camelcase */\n\ninterface RemoteConfigResponse {\n  entries?: RemoteConfigTemplate;\n  state?: string;\n}\n\nconst FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';\n\nexport function getConfig(\n  performanceController: PerformanceController,\n  iid: string\n): Promise<void> {\n  const config = getStoredConfig();\n  if (config) {\n    processConfig(config);\n    return Promise.resolve();\n  }\n\n  return getRemoteConfig(performanceController, iid)\n    .then(processConfig)\n    .then(\n      config => storeConfig(config),\n      /** Do nothing for error, use defaults set in settings service. */\n      () => {}\n    );\n}\n\nfunction getStoredConfig(): RemoteConfigResponse | undefined {\n  const localStorage = Api.getInstance().localStorage;\n  if (!localStorage) {\n    return;\n  }\n  const expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);\n  if (!expiryString || !configValid(expiryString)) {\n    return;\n  }\n\n  const configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);\n  if (!configStringified) {\n    return;\n  }\n  try {\n    const configResponse: RemoteConfigResponse = JSON.parse(configStringified);\n    return configResponse;\n  } catch {\n    return;\n  }\n}\n\nfunction storeConfig(config: RemoteConfigResponse | undefined): void {\n  const localStorage = Api.getInstance().localStorage;\n  if (!config || !localStorage) {\n    return;\n  }\n\n  localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));\n  localStorage.setItem(\n    CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n    String(\n      Date.now() +\n        SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000\n    )\n  );\n}\n\nconst COULD_NOT_GET_CONFIG_MSG =\n  'Could not fetch config, will use default configs';\n\nfunction getRemoteConfig(\n  performanceController: PerformanceController,\n  iid: string\n): Promise<RemoteConfigResponse | undefined> {\n  // Perf needs auth token only to retrieve remote config.\n  return getAuthTokenPromise(performanceController.installations)\n    .then(authToken => {\n      const projectId = getProjectId(performanceController.app);\n      const apiKey = getApiKey(performanceController.app);\n      const configEndPoint = `https://firebaseremoteconfig.googleapis.com/v1/projects/${projectId}/namespaces/fireperf:fetch?key=${apiKey}`;\n      const request = new Request(configEndPoint, {\n        method: 'POST',\n        headers: { Authorization: `${FIS_AUTH_PREFIX} ${authToken}` },\n        /* eslint-disable camelcase */\n        body: JSON.stringify({\n          app_instance_id: iid,\n          app_instance_id_token: authToken,\n          app_id: getAppId(performanceController.app),\n          app_version: SDK_VERSION,\n          sdk_version: REMOTE_CONFIG_SDK_VERSION\n        })\n        /* eslint-enable camelcase */\n      });\n      return fetch(request).then(response => {\n        if (response.ok) {\n          return response.json() as RemoteConfigResponse;\n        }\n        // In case response is not ok. This will be caught by catch.\n        throw ERROR_FACTORY.create(ErrorCode.RC_NOT_OK);\n      });\n    })\n    .catch(() => {\n      consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);\n      return undefined;\n    });\n}\n\n/**\n * Processes config coming either from calling RC or from local storage.\n * This method only runs if call is successful or config in storage\n * is valid.\n */\nfunction processConfig(\n  config?: RemoteConfigResponse\n): RemoteConfigResponse | undefined {\n  if (!config) {\n    return config;\n  }\n  const settingsServiceInstance = SettingsService.getInstance();\n  const entries = config.entries || {};\n  if (entries.fpr_enabled !== undefined) {\n    // TODO: Change the assignment of loggingEnabled once the received type is\n    // known.\n    settingsServiceInstance.loggingEnabled =\n      String(entries.fpr_enabled) === 'true';\n  } else if (DEFAULT_CONFIGS.loggingEnabled !== undefined) {\n    // Config retrieved successfully, but there is no fpr_enabled in template.\n    // Use secondary configs value.\n    settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;\n  }\n  if (entries.fpr_log_source) {\n    settingsServiceInstance.logSource = Number(entries.fpr_log_source);\n  } else if (DEFAULT_CONFIGS.logSource) {\n    settingsServiceInstance.logSource = DEFAULT_CONFIGS.logSource;\n  }\n\n  if (entries.fpr_log_endpoint_url) {\n    settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;\n  } else if (DEFAULT_CONFIGS.logEndPointUrl) {\n    settingsServiceInstance.logEndPointUrl = DEFAULT_CONFIGS.logEndPointUrl;\n  }\n\n  // Key from Remote Config has to be non-empty string, otherwise use local value.\n  if (entries.fpr_log_transport_key) {\n    settingsServiceInstance.transportKey = entries.fpr_log_transport_key;\n  } else if (DEFAULT_CONFIGS.transportKey) {\n    settingsServiceInstance.transportKey = DEFAULT_CONFIGS.transportKey;\n  }\n\n  if (entries.fpr_vc_network_request_sampling_rate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate = Number(\n      entries.fpr_vc_network_request_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.networkRequestsSamplingRate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate =\n      DEFAULT_CONFIGS.networkRequestsSamplingRate;\n  }\n  if (entries.fpr_vc_trace_sampling_rate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate = Number(\n      entries.fpr_vc_trace_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.tracesSamplingRate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate =\n      DEFAULT_CONFIGS.tracesSamplingRate;\n  }\n  // Set the per session trace and network logging flags.\n  settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.tracesSamplingRate\n  );\n  settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.networkRequestsSamplingRate\n  );\n  return config;\n}\n\nfunction configValid(expiry: string): boolean {\n  return Number(expiry) > Date.now();\n}\n\nfunction shouldLogAfterSampling(samplingRate: number): boolean {\n  return Math.random() <= samplingRate;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIidPromise } from './iid_service';\nimport { getConfig } from './remote_config_service';\nimport { Api } from './api_service';\nimport { PerformanceController } from '../controllers/perf';\n\nconst enum InitializationStatus {\n  notInitialized = 1,\n  initializationPending,\n  initialized\n}\n\nlet initializationStatus = InitializationStatus.notInitialized;\n\nlet initializationPromise: Promise<void> | undefined;\n\nexport function getInitializationPromise(\n  performanceController: PerformanceController\n): Promise<void> {\n  initializationStatus = InitializationStatus.initializationPending;\n\n  initializationPromise =\n    initializationPromise || initializePerf(performanceController);\n\n  return initializationPromise;\n}\n\nexport function isPerfInitialized(): boolean {\n  return initializationStatus === InitializationStatus.initialized;\n}\n\nfunction initializePerf(\n  performanceController: PerformanceController\n): Promise<void> {\n  return getDocumentReadyComplete()\n    .then(() => getIidPromise(performanceController.installations))\n    .then(iid => getConfig(performanceController, iid))\n    .then(\n      () => changeInitializationStatus(),\n      () => changeInitializationStatus()\n    );\n}\n\n/**\n * Returns a promise which resolves whenever the document readystate is complete or\n * immediately if it is called after page load complete.\n */\nfunction getDocumentReadyComplete(): Promise<void> {\n  const document = Api.getInstance().document;\n  return new Promise(resolve => {\n    if (document && document.readyState !== 'complete') {\n      const handler = (): void => {\n        if (document.readyState === 'complete') {\n          document.removeEventListener('readystatechange', handler);\n          resolve();\n        }\n      };\n      document.addEventListener('readystatechange', handler);\n    } else {\n      resolve();\n    }\n  });\n}\n\nfunction changeInitializationStatus(): void {\n  initializationStatus = InitializationStatus.initialized;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SettingsService } from './settings_service';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst DEFAULT_SEND_INTERVAL_MS = 10 * 1000;\nconst INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000;\nconst MAX_EVENT_COUNT_PER_REQUEST = 1000;\nconst DEFAULT_REMAINING_TRIES = 3;\n\nlet remainingTries = DEFAULT_REMAINING_TRIES;\n\ninterface BatchEvent {\n  message: string;\n  eventTime: number;\n}\n\n/* eslint-disable camelcase */\n// CC/Fl accepted log format.\ninterface TransportBatchLogFormat {\n  request_time_ms: string;\n  client_info: ClientInfo;\n  log_source: number;\n  log_event: Log[];\n}\n\ninterface ClientInfo {\n  client_type: number;\n  js_client_info: {};\n}\n\ninterface Log {\n  source_extension_json_proto3: string;\n  event_time_ms: string;\n}\n/* eslint-enable camelcase */\n\nlet queue: BatchEvent[] = [];\n\nlet isTransportSetup: boolean = false;\n\nexport function setupTransportService(): void {\n  if (!isTransportSetup) {\n    processQueue(INITIAL_SEND_TIME_DELAY_MS);\n    isTransportSetup = true;\n  }\n}\n\n/**\n * Utilized by testing to clean up message queue and un-initialize transport service.\n */\nexport function resetTransportService(): void {\n  isTransportSetup = false;\n  queue = [];\n}\n\nfunction processQueue(timeOffset: number): void {\n  setTimeout(() => {\n    // If there is no remainingTries left, stop retrying.\n    if (remainingTries <= 0) {\n      return;\n    }\n\n    if (queue.length > 0) {\n      dispatchQueueEvents();\n    }\n    processQueue(DEFAULT_SEND_INTERVAL_MS);\n  }, timeOffset);\n}\n\nfunction dispatchQueueEvents(): void {\n  // Extract events up to the maximum cap of single logRequest from top of \"official queue\".\n  // The staged events will be used for current logRequest attempt, remaining events will be kept\n  // for next attempt.\n  const staged = queue.splice(0, MAX_EVENT_COUNT_PER_REQUEST);\n\n  /* eslint-disable camelcase */\n  // We will pass the JSON serialized event to the backend.\n  const log_event: Log[] = staged.map(evt => ({\n    source_extension_json_proto3: evt.message,\n    event_time_ms: String(evt.eventTime)\n  }));\n\n  const data: TransportBatchLogFormat = {\n    request_time_ms: String(Date.now()),\n    client_info: {\n      client_type: 1, // 1 is JS\n      js_client_info: {}\n    },\n    log_source: SettingsService.getInstance().logSource,\n    log_event\n  };\n  /* eslint-enable camelcase */\n\n  postToFlEndpoint(data)\n    .then(() => {\n      remainingTries = DEFAULT_REMAINING_TRIES;\n    })\n    .catch(() => {\n      // If the request fails for some reason, add the events that were attempted\n      // back to the primary queue to retry later.\n      queue = [...staged, ...queue];\n      remainingTries--;\n      consoleLogger.info(`Tries left: ${remainingTries}.`);\n      processQueue(DEFAULT_SEND_INTERVAL_MS);\n    });\n}\n\nfunction postToFlEndpoint(data: TransportBatchLogFormat): Promise<void> {\n  const flTransportFullUrl =\n    SettingsService.getInstance().getFlTransportFullUrl();\n  const body = JSON.stringify(data);\n\n  return navigator.sendBeacon && navigator.sendBeacon(flTransportFullUrl, body)\n    ? Promise.resolve()\n    : fetch(flTransportFullUrl, {\n        method: 'POST',\n        body,\n        keepalive: true\n      }).then();\n}\n\nfunction addToQueue(evt: BatchEvent): void {\n  if (!evt.eventTime || !evt.message) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_CC_LOG);\n  }\n  // Add the new event to the queue.\n  queue = [...queue, evt];\n}\n\n/** Log handler for cc service to send the performance logs to the server. */\nexport function transportHandler(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  serializer: (...args: any[]) => string\n): (...args: unknown[]) => void {\n  return (...args) => {\n    const message = serializer(...args);\n    addToQueue({\n      message,\n      eventTime: Date.now()\n    });\n  };\n}\n\n/**\n * Force flush the queued events. Useful at page unload time to ensure all\n * events are uploaded.\n */\nexport function flushQueuedEvents(): void {\n  while (queue.length > 0) {\n    dispatchQueueEvents();\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIid } from './iid_service';\nimport { NetworkRequest } from '../resources/network_request';\nimport { Trace } from '../resources/trace';\nimport { Api } from './api_service';\nimport { SettingsService } from './settings_service';\nimport {\n  getServiceWorkerStatus,\n  getVisibilityState,\n  getEffectiveConnectionType\n} from '../utils/attributes_utils';\nimport {\n  isPerfInitialized,\n  getInitializationPromise\n} from './initialization_service';\nimport { transportHandler, flushQueuedEvents } from './transport_service';\nimport { SDK_VERSION } from '../constants';\nimport { FirebaseApp } from '@firebase/app';\nimport { getAppId } from '../utils/app_utils';\n\nconst enum ResourceType {\n  NetworkRequest,\n  Trace\n}\n\n/* eslint-disable camelcase */\ninterface ApplicationInfo {\n  google_app_id: string;\n  app_instance_id?: string;\n  web_app_info: WebAppInfo;\n  application_process_state: number;\n}\n\ninterface WebAppInfo {\n  sdk_version: string;\n  page_url: string;\n  service_worker_status: number;\n  visibility_state: number;\n  effective_connection_type: number;\n}\n\ninterface PerfNetworkLog {\n  application_info: ApplicationInfo;\n  network_request_metric: NetworkRequestMetric;\n}\n\ninterface PerfTraceLog {\n  application_info: ApplicationInfo;\n  trace_metric: TraceMetric;\n}\n\ninterface NetworkRequestMetric {\n  url: string;\n  http_method: number;\n  http_response_code: number;\n  response_payload_bytes?: number;\n  client_start_time_us?: number;\n  time_to_response_initiated_us?: number;\n  time_to_response_completed_us?: number;\n}\n\ninterface TraceMetric {\n  name: string;\n  is_auto: boolean;\n  client_start_time_us: number;\n  duration_us: number;\n  counters?: { [key: string]: number };\n  custom_attributes?: { [key: string]: string };\n}\n\ninterface Logger {\n  send: (\n    resource: NetworkRequest | Trace,\n    resourceType: ResourceType\n  ) => void | undefined;\n  flush: () => void;\n}\n\nlet logger: Logger;\n//\n// This method is not called before initialization.\nfunction sendLog(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): void {\n  if (!logger) {\n    logger = {\n      send: transportHandler(serializer),\n      flush: flushQueuedEvents\n    };\n  }\n  logger.send(resource, resourceType);\n}\n\nexport function logTrace(trace: Trace): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log if trace is auto generated and instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled && trace.isAuto) {\n    return;\n  }\n  // Do not log if trace is custom and data collection is disabled.\n  if (!settingsService.dataCollectionEnabled && !trace.isAuto) {\n    return;\n  }\n  // Do not log if required apis are not available.\n  if (!Api.getInstance().requiredApisAvailable()) {\n    return;\n  }\n\n  if (isPerfInitialized()) {\n    sendTraceLog(trace);\n  } else {\n    // Custom traces can be used before the initialization but logging\n    // should wait until after.\n    getInitializationPromise(trace.performanceController).then(\n      () => sendTraceLog(trace),\n      () => sendTraceLog(trace)\n    );\n  }\n}\n\nexport function flushLogs(): void {\n  if (logger) {\n    logger.flush();\n  }\n}\n\nfunction sendTraceLog(trace: Trace): void {\n  if (!getIid()) {\n    return;\n  }\n\n  const settingsService = SettingsService.getInstance();\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logTraceAfterSampling\n  ) {\n    return;\n  }\n\n  sendLog(trace, ResourceType.Trace);\n}\n\nexport function logNetworkRequest(networkRequest: NetworkRequest): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log network requests if instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled) {\n    return;\n  }\n\n  // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.\n  // Need to blacklist both old and new endpoints to avoid migration gap.\n  const networkRequestUrl = networkRequest.url;\n\n  // Blacklist old log endpoint and new transport endpoint.\n  // Because Performance SDK doesn't instrument requests sent from SDK itself.\n  const logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];\n  const flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];\n  if (\n    networkRequestUrl === logEndpointUrl ||\n    networkRequestUrl === flEndpointUrl\n  ) {\n    return;\n  }\n\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logNetworkAfterSampling\n  ) {\n    return;\n  }\n\n  sendLog(networkRequest, ResourceType.NetworkRequest);\n}\n\nfunction serializer(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): string {\n  if (resourceType === ResourceType.NetworkRequest) {\n    return serializeNetworkRequest(resource as NetworkRequest);\n  }\n  return serializeTrace(resource as Trace);\n}\n\nfunction serializeNetworkRequest(networkRequest: NetworkRequest): string {\n  const networkRequestMetric: NetworkRequestMetric = {\n    url: networkRequest.url,\n    http_method: networkRequest.httpMethod || 0,\n    http_response_code: 200,\n    response_payload_bytes: networkRequest.responsePayloadBytes,\n    client_start_time_us: networkRequest.startTimeUs,\n    time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,\n    time_to_response_completed_us: networkRequest.timeToResponseCompletedUs\n  };\n  const perfMetric: PerfNetworkLog = {\n    application_info: getApplicationInfo(\n      networkRequest.performanceController.app\n    ),\n    network_request_metric: networkRequestMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction serializeTrace(trace: Trace): string {\n  const traceMetric: TraceMetric = {\n    name: trace.name,\n    is_auto: trace.isAuto,\n    client_start_time_us: trace.startTimeUs,\n    duration_us: trace.durationUs\n  };\n\n  if (Object.keys(trace.counters).length !== 0) {\n    traceMetric.counters = trace.counters;\n  }\n  const customAttributes = trace.getAttributes();\n  if (Object.keys(customAttributes).length !== 0) {\n    traceMetric.custom_attributes = customAttributes;\n  }\n\n  const perfMetric: PerfTraceLog = {\n    application_info: getApplicationInfo(trace.performanceController.app),\n    trace_metric: traceMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction getApplicationInfo(firebaseApp: FirebaseApp): ApplicationInfo {\n  return {\n    google_app_id: getAppId(firebaseApp),\n    app_instance_id: getIid(),\n    web_app_info: {\n      sdk_version: SDK_VERSION,\n      page_url: Api.getInstance().getUrl(),\n      service_worker_status: getServiceWorkerStatus(),\n      visibility_state: getVisibilityState(),\n      effective_connection_type: getEffectiveConnectionType()\n    },\n    application_process_state: 0\n  };\n}\n\n/* eslint-enable camelcase */\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\nimport { logNetworkRequest } from '../services/perf_logger';\nimport { PerformanceController } from '../controllers/perf';\n\n// The order of values of this enum should not be changed.\nexport const enum HttpMethod {\n  HTTP_METHOD_UNKNOWN = 0,\n  GET = 1,\n  PUT = 2,\n  POST = 3,\n  DELETE = 4,\n  HEAD = 5,\n  PATCH = 6,\n  OPTIONS = 7,\n  TRACE = 8,\n  CONNECT = 9\n}\n\n// Durations are in microseconds.\nexport interface NetworkRequest {\n  performanceController: PerformanceController;\n  url: string;\n  httpMethod?: HttpMethod;\n  requestPayloadBytes?: number;\n  responsePayloadBytes?: number;\n  httpResponseCode?: number;\n  responseContentType?: string;\n  startTimeUs?: number;\n  timeToRequestCompletedUs?: number;\n  timeToResponseInitiatedUs?: number;\n  timeToResponseCompletedUs?: number;\n}\n\nexport function createNetworkRequestEntry(\n  performanceController: PerformanceController,\n  entry: PerformanceEntry\n): void {\n  const performanceEntry = entry as PerformanceResourceTiming;\n  if (!performanceEntry || performanceEntry.responseStart === undefined) {\n    return;\n  }\n  const timeOrigin = Api.getInstance().getTimeOrigin();\n  const startTimeUs = Math.floor(\n    (performanceEntry.startTime + timeOrigin) * 1000\n  );\n  const timeToResponseInitiatedUs = performanceEntry.responseStart\n    ? Math.floor(\n        (performanceEntry.responseStart - performanceEntry.startTime) * 1000\n      )\n    : undefined;\n  const timeToResponseCompletedUs = Math.floor(\n    (performanceEntry.responseEnd - performanceEntry.startTime) * 1000\n  );\n  // Remove the query params from logged network request url.\n  const url = performanceEntry.name && performanceEntry.name.split('?')[0];\n  const networkRequest: NetworkRequest = {\n    performanceController,\n    url,\n    responsePayloadBytes: performanceEntry.transferSize,\n    startTimeUs,\n    timeToResponseInitiatedUs,\n    timeToResponseCompletedUs\n  };\n\n  logNetworkRequest(networkRequest);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME,\n  OOB_TRACE_PAGE_LOAD_PREFIX,\n  CUMULATIVE_LAYOUT_SHIFT_METRIC_NAME,\n  INTERACTION_TO_NEXT_PAINT_METRIC_NAME,\n  LARGEST_CONTENTFUL_PAINT_METRIC_NAME\n} from '../constants';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst MAX_METRIC_NAME_LENGTH = 100;\nconst RESERVED_AUTO_PREFIX = '_';\nconst oobMetrics = [\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME,\n  LARGEST_CONTENTFUL_PAINT_METRIC_NAME,\n  CUMULATIVE_LAYOUT_SHIFT_METRIC_NAME,\n  INTERACTION_TO_NEXT_PAINT_METRIC_NAME\n];\n\n/**\n * Returns true if the metric is custom and does not start with reserved prefix, or if\n * the metric is one of out of the box page load trace metrics.\n */\nexport function isValidMetricName(name: string, traceName?: string): boolean {\n  if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {\n    return false;\n  }\n  return (\n    (traceName &&\n      traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) &&\n      oobMetrics.indexOf(name) > -1) ||\n    !name.startsWith(RESERVED_AUTO_PREFIX)\n  );\n}\n\n/**\n * Converts the provided value to an integer value to be used in case of a metric.\n * @param providedValue Provided number value of the metric that needs to be converted to an integer.\n *\n * @returns Converted integer number to be set for the metric.\n */\nexport function convertMetricValueToInteger(providedValue: number): number {\n  const valueAsInteger: number = Math.floor(providedValue);\n  if (valueAsInteger < providedValue) {\n    consoleLogger.info(\n      `Metric value should be an Integer, setting the value as : ${valueAsInteger}.`\n    );\n  }\n  return valueAsInteger;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  TRACE_START_MARK_PREFIX,\n  TRACE_STOP_MARK_PREFIX,\n  TRACE_MEASURE_PREFIX,\n  OOB_TRACE_PAGE_LOAD_PREFIX,\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME,\n  LARGEST_CONTENTFUL_PAINT_METRIC_NAME,\n  LARGEST_CONTENTFUL_PAINT_ATTRIBUTE_NAME,\n  INTERACTION_TO_NEXT_PAINT_METRIC_NAME,\n  INTERACTION_TO_NEXT_PAINT_ATTRIBUTE_NAME,\n  CUMULATIVE_LAYOUT_SHIFT_METRIC_NAME,\n  CUMULATIVE_LAYOUT_SHIFT_ATTRIBUTE_NAME\n} from '../constants';\nimport { Api } from '../services/api_service';\nimport { logTrace, flushLogs } from '../services/perf_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport {\n  isValidCustomAttributeName,\n  isValidCustomAttributeValue\n} from '../utils/attributes_utils';\nimport {\n  isValidMetricName,\n  convertMetricValueToInteger\n} from '../utils/metric_utils';\nimport { PerformanceTrace } from '../public_types';\nimport { PerformanceController } from '../controllers/perf';\nimport { CoreVitalMetric, WebVitalMetrics } from './web_vitals';\n\nconst enum TraceState {\n  UNINITIALIZED = 1,\n  RUNNING,\n  TERMINATED\n}\n\nexport class Trace implements PerformanceTrace {\n  private state: TraceState = TraceState.UNINITIALIZED;\n  startTimeUs!: number;\n  durationUs!: number;\n  private customAttributes: { [key: string]: string } = {};\n  counters: { [counterName: string]: number } = {};\n  private api = Api.getInstance();\n  private randomId = Math.floor(Math.random() * 1000000);\n  private traceStartMark!: string;\n  private traceStopMark!: string;\n  private traceMeasure!: string;\n\n  /**\n   * @param performanceController The performance controller running.\n   * @param name The name of the trace.\n   * @param isAuto If the trace is auto-instrumented.\n   * @param traceMeasureName The name of the measure marker in user timing specification. This field\n   * is only set when the trace is built for logging when the user directly uses the user timing\n   * api (performance.mark and performance.measure).\n   */\n  constructor(\n    readonly performanceController: PerformanceController,\n    readonly name: string,\n    readonly isAuto = false,\n    traceMeasureName?: string\n  ) {\n    if (!this.isAuto) {\n      this.traceStartMark = `${TRACE_START_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceStopMark = `${TRACE_STOP_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceMeasure =\n        traceMeasureName ||\n        `${TRACE_MEASURE_PREFIX}-${this.randomId}-${this.name}`;\n\n      if (traceMeasureName) {\n        // For the case of direct user timing traces, no start stop will happen. The measure object\n        // is already available.\n        this.calculateTraceMetrics();\n      }\n    }\n  }\n\n  /**\n   * Starts a trace. The measurement of the duration starts at this point.\n   */\n  start(): void {\n    if (this.state !== TraceState.UNINITIALIZED) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STARTED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.api.mark(this.traceStartMark);\n    this.state = TraceState.RUNNING;\n  }\n\n  /**\n   * Stops the trace. The measurement of the duration of the trace stops at this point and trace\n   * is logged.\n   */\n  stop(): void {\n    if (this.state !== TraceState.RUNNING) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STOPPED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.state = TraceState.TERMINATED;\n    this.api.mark(this.traceStopMark);\n    this.api.measure(\n      this.traceMeasure,\n      this.traceStartMark,\n      this.traceStopMark\n    );\n    this.calculateTraceMetrics();\n    logTrace(this);\n  }\n\n  /**\n   * Records a trace with predetermined values. If this method is used a trace is created and logged\n   * directly. No need to use start and stop methods.\n   * @param startTime Trace start time since epoch in millisec\n   * @param duration The duration of the trace in millisec\n   * @param options An object which can optionally hold maps of custom metrics and custom attributes\n   */\n  record(\n    startTime: number,\n    duration: number,\n    options?: {\n      metrics?: { [key: string]: number };\n      attributes?: { [key: string]: string };\n    }\n  ): void {\n    if (startTime <= 0) {\n      throw ERROR_FACTORY.create(ErrorCode.NONPOSITIVE_TRACE_START_TIME, {\n        traceName: this.name\n      });\n    }\n    if (duration <= 0) {\n      throw ERROR_FACTORY.create(ErrorCode.NONPOSITIVE_TRACE_DURATION, {\n        traceName: this.name\n      });\n    }\n\n    this.durationUs = Math.floor(duration * 1000);\n    this.startTimeUs = Math.floor(startTime * 1000);\n    if (options && options.attributes) {\n      this.customAttributes = { ...options.attributes };\n    }\n    if (options && options.metrics) {\n      for (const metricName of Object.keys(options.metrics)) {\n        if (!isNaN(Number(options.metrics[metricName]))) {\n          this.counters[metricName] = Math.floor(\n            Number(options.metrics[metricName])\n          );\n        }\n      }\n    }\n    logTrace(this);\n  }\n\n  /**\n   * Increments a custom metric by a certain number or 1 if number not specified. Will create a new\n   * custom metric if one with the given name does not exist. The value will be floored down to an\n   * integer.\n   * @param counter Name of the custom metric\n   * @param numAsInteger Increment by value\n   */\n  incrementMetric(counter: string, numAsInteger = 1): void {\n    if (this.counters[counter] === undefined) {\n      this.putMetric(counter, numAsInteger);\n    } else {\n      this.putMetric(counter, this.counters[counter] + numAsInteger);\n    }\n  }\n\n  /**\n   * Sets a custom metric to a specified value. Will create a new custom metric if one with the\n   * given name does not exist. The value will be floored down to an integer.\n   * @param counter Name of the custom metric\n   * @param numAsInteger Set custom metric to this value\n   */\n  putMetric(counter: string, numAsInteger: number): void {\n    if (isValidMetricName(counter, this.name)) {\n      this.counters[counter] = convertMetricValueToInteger(numAsInteger ?? 0);\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_CUSTOM_METRIC_NAME, {\n        customMetricName: counter\n      });\n    }\n  }\n\n  /**\n   * Returns the value of the custom metric by that name. If a custom metric with that name does\n   * not exist will return zero.\n   * @param counter\n   */\n  getMetric(counter: string): number {\n    return this.counters[counter] || 0;\n  }\n\n  /**\n   * Sets a custom attribute of a trace to a certain value.\n   * @param attr\n   * @param value\n   */\n  putAttribute(attr: string, value: string): void {\n    const isValidName = isValidCustomAttributeName(attr);\n    const isValidValue = isValidCustomAttributeValue(value);\n    if (isValidName && isValidValue) {\n      this.customAttributes[attr] = value;\n      return;\n    }\n    // Throw appropriate error when the attribute name or value is invalid.\n    if (!isValidName) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_NAME, {\n        attributeName: attr\n      });\n    }\n    if (!isValidValue) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_VALUE, {\n        attributeValue: value\n      });\n    }\n  }\n\n  /**\n   * Retrieves the value a custom attribute of a trace is set to.\n   * @param attr\n   */\n  getAttribute(attr: string): string | undefined {\n    return this.customAttributes[attr];\n  }\n\n  removeAttribute(attr: string): void {\n    if (this.customAttributes[attr] === undefined) {\n      return;\n    }\n    delete this.customAttributes[attr];\n  }\n\n  getAttributes(): { [key: string]: string } {\n    return { ...this.customAttributes };\n  }\n\n  private setStartTime(startTime: number): void {\n    this.startTimeUs = startTime;\n  }\n\n  private setDuration(duration: number): void {\n    this.durationUs = duration;\n  }\n\n  /**\n   * Calculates and assigns the duration and start time of the trace using the measure performance\n   * entry.\n   */\n  private calculateTraceMetrics(): void {\n    const perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);\n    const perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];\n    if (perfMeasureEntry) {\n      this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);\n      this.startTimeUs = Math.floor(\n        (perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000\n      );\n    }\n  }\n\n  /**\n   * @param navigationTimings A single element array which contains the navigationTIming object of\n   * the page load\n   * @param paintTimings A array which contains paintTiming object of the page load\n   * @param firstInputDelay First input delay in millisec\n   */\n  static createOobTrace(\n    performanceController: PerformanceController,\n    navigationTimings: PerformanceNavigationTiming[],\n    paintTimings: PerformanceEntry[],\n    webVitalMetrics: WebVitalMetrics,\n    firstInputDelay?: number\n  ): void {\n    const route = Api.getInstance().getUrl();\n    if (!route) {\n      return;\n    }\n    const trace = new Trace(\n      performanceController,\n      OOB_TRACE_PAGE_LOAD_PREFIX + route,\n      true\n    );\n    const timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);\n    trace.setStartTime(timeOriginUs);\n\n    // navigationTimings includes only one element.\n    if (navigationTimings && navigationTimings[0]) {\n      trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));\n      trace.putMetric(\n        'domInteractive',\n        Math.floor(navigationTimings[0].domInteractive * 1000)\n      );\n      trace.putMetric(\n        'domContentLoadedEventEnd',\n        Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000)\n      );\n      trace.putMetric(\n        'loadEventEnd',\n        Math.floor(navigationTimings[0].loadEventEnd * 1000)\n      );\n    }\n\n    const FIRST_PAINT = 'first-paint';\n    const FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';\n    if (paintTimings) {\n      const firstPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_PAINT\n      );\n      if (firstPaint && firstPaint.startTime) {\n        trace.putMetric(\n          FIRST_PAINT_COUNTER_NAME,\n          Math.floor(firstPaint.startTime * 1000)\n        );\n      }\n      const firstContentfulPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_CONTENTFUL_PAINT\n      );\n      if (firstContentfulPaint && firstContentfulPaint.startTime) {\n        trace.putMetric(\n          FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n          Math.floor(firstContentfulPaint.startTime * 1000)\n        );\n      }\n\n      if (firstInputDelay) {\n        trace.putMetric(\n          FIRST_INPUT_DELAY_COUNTER_NAME,\n          Math.floor(firstInputDelay * 1000)\n        );\n      }\n    }\n\n    this.addWebVitalMetric(\n      trace,\n      LARGEST_CONTENTFUL_PAINT_METRIC_NAME,\n      LARGEST_CONTENTFUL_PAINT_ATTRIBUTE_NAME,\n      webVitalMetrics.lcp\n    );\n    this.addWebVitalMetric(\n      trace,\n      CUMULATIVE_LAYOUT_SHIFT_METRIC_NAME,\n      CUMULATIVE_LAYOUT_SHIFT_ATTRIBUTE_NAME,\n      webVitalMetrics.cls\n    );\n    this.addWebVitalMetric(\n      trace,\n      INTERACTION_TO_NEXT_PAINT_METRIC_NAME,\n      INTERACTION_TO_NEXT_PAINT_ATTRIBUTE_NAME,\n      webVitalMetrics.inp\n    );\n\n    // Page load logs are sent at unload time and so should be logged and\n    // flushed immediately.\n    logTrace(trace);\n    flushLogs();\n  }\n\n  static addWebVitalMetric(\n    trace: Trace,\n    metricKey: string,\n    attributeKey: string,\n    metric?: CoreVitalMetric\n  ): void {\n    if (metric) {\n      trace.putMetric(metricKey, Math.floor(metric.value * 1000));\n      if (metric.elementAttribution) {\n        trace.putAttribute(attributeKey, metric.elementAttribution);\n      }\n    }\n  }\n\n  static createUserTimingTrace(\n    performanceController: PerformanceController,\n    measureName: string\n  ): void {\n    const trace = new Trace(\n      performanceController,\n      measureName,\n      false,\n      measureName\n    );\n    logTrace(trace);\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CLSMetricWithAttribution,\n  INPMetricWithAttribution,\n  LCPMetricWithAttribution\n} from 'web-vitals/attribution';\n\nimport { TRACE_MEASURE_PREFIX } from '../constants';\nimport { PerformanceController } from '../controllers/perf';\nimport { createNetworkRequestEntry } from '../resources/network_request';\nimport { Trace } from '../resources/trace';\nimport { WebVitalMetrics } from '../resources/web_vitals';\n\nimport { Api } from './api_service';\nimport { getIid } from './iid_service';\n\nlet webVitalMetrics: WebVitalMetrics = {};\nlet sentPageLoadTrace: boolean = false;\nlet firstInputDelay: number | undefined;\n\nexport function setupOobResources(\n  performanceController: PerformanceController\n): void {\n  // Do not initialize unless iid is available.\n  if (!getIid()) {\n    return;\n  }\n  // The load event might not have fired yet, and that means performance\n  // navigation timing object has a duration of 0. The setup should run after\n  // all current tasks in js queue.\n  setTimeout(() => setupOobTraces(performanceController), 0);\n  setTimeout(() => setupNetworkRequests(performanceController), 0);\n  setTimeout(() => setupUserTimingTraces(performanceController), 0);\n}\n\nfunction setupNetworkRequests(\n  performanceController: PerformanceController\n): void {\n  const api = Api.getInstance();\n  const resources = api.getEntriesByType('resource');\n  for (const resource of resources) {\n    createNetworkRequestEntry(performanceController, resource);\n  }\n  api.setupObserver('resource', entry =>\n    createNetworkRequestEntry(performanceController, entry)\n  );\n}\n\nfunction setupOobTraces(performanceController: PerformanceController): void {\n  const api = Api.getInstance();\n  // Better support for Safari\n  if ('onpagehide' in window) {\n    api.document.addEventListener('pagehide', () =>\n      sendOobTrace(performanceController)\n    );\n  } else {\n    api.document.addEventListener('unload', () =>\n      sendOobTrace(performanceController)\n    );\n  }\n  api.document.addEventListener('visibilitychange', () => {\n    if (api.document.visibilityState === 'hidden') {\n      sendOobTrace(performanceController);\n    }\n  });\n\n  if (api.onFirstInputDelay) {\n    api.onFirstInputDelay((fid: number) => {\n      firstInputDelay = fid;\n    });\n  }\n\n  api.onLCP((metric: LCPMetricWithAttribution) => {\n    webVitalMetrics.lcp = {\n      value: metric.value,\n      elementAttribution: metric.attribution?.element\n    };\n  });\n  api.onCLS((metric: CLSMetricWithAttribution) => {\n    webVitalMetrics.cls = {\n      value: metric.value,\n      elementAttribution: metric.attribution?.largestShiftTarget\n    };\n  });\n  api.onINP((metric: INPMetricWithAttribution) => {\n    webVitalMetrics.inp = {\n      value: metric.value,\n      elementAttribution: metric.attribution?.interactionTarget\n    };\n  });\n}\n\nfunction setupUserTimingTraces(\n  performanceController: PerformanceController\n): void {\n  const api = Api.getInstance();\n  // Run through the measure performance entries collected up to this point.\n  const measures = api.getEntriesByType('measure');\n  for (const measure of measures) {\n    createUserTimingTrace(performanceController, measure);\n  }\n  // Setup an observer to capture the measures from this point on.\n  api.setupObserver('measure', entry =>\n    createUserTimingTrace(performanceController, entry)\n  );\n}\n\nfunction createUserTimingTrace(\n  performanceController: PerformanceController,\n  measure: PerformanceEntry\n): void {\n  const measureName = measure.name;\n  // Do not create a trace, if the user timing marks and measures are created by\n  // the sdk itself.\n  if (\n    measureName.substring(0, TRACE_MEASURE_PREFIX.length) ===\n    TRACE_MEASURE_PREFIX\n  ) {\n    return;\n  }\n  Trace.createUserTimingTrace(performanceController, measureName);\n}\n\nfunction sendOobTrace(performanceController: PerformanceController): void {\n  if (!sentPageLoadTrace) {\n    sentPageLoadTrace = true;\n    const api = Api.getInstance();\n    const navigationTimings = api.getEntriesByType(\n      'navigation'\n    ) as PerformanceNavigationTiming[];\n    const paintTimings = api.getEntriesByType('paint');\n\n    // On page unload web vitals may be updated so queue the oob trace creation\n    // so that these updates have time to be included.\n    setTimeout(() => {\n      Trace.createOobTrace(\n        performanceController,\n        navigationTimings,\n        paintTimings,\n        webVitalMetrics,\n        firstInputDelay\n      );\n    }, 0);\n  }\n}\n\n/**\n * This service will only export the page load trace once. This function allows\n * resetting it for unit tests\n */\nexport function resetForUnitTests(): void {\n  sentPageLoadTrace = false;\n  firstInputDelay = undefined;\n  webVitalMetrics = {};\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { setupOobResources } from '../services/oob_resources_service';\nimport { SettingsService } from '../services/settings_service';\nimport { getInitializationPromise } from '../services/initialization_service';\nimport { Api } from '../services/api_service';\nimport { FirebaseApp } from '@firebase/app';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { PerformanceSettings, FirebasePerformance } from '../public_types';\nimport { validateIndexedDBOpenable } from '@firebase/util';\nimport { setupTransportService } from '../services/transport_service';\nimport { consoleLogger } from '../utils/console_logger';\n\nexport class PerformanceController implements FirebasePerformance {\n  private initialized: boolean = false;\n\n  constructor(\n    readonly app: FirebaseApp,\n    readonly installations: _FirebaseInstallationsInternal\n  ) {}\n\n  /**\n   * This method *must* be called internally as part of creating a\n   * PerformanceController instance.\n   *\n   * Currently it's not possible to pass the settings object through the\n   * constructor using Components, so this method exists to be called with the\n   * desired settings, to ensure nothing is collected without the user's\n   * consent.\n   */\n  _init(settings?: PerformanceSettings): void {\n    if (this.initialized) {\n      return;\n    }\n\n    if (settings?.dataCollectionEnabled !== undefined) {\n      this.dataCollectionEnabled = settings.dataCollectionEnabled;\n    }\n    if (settings?.instrumentationEnabled !== undefined) {\n      this.instrumentationEnabled = settings.instrumentationEnabled;\n    }\n\n    if (Api.getInstance().requiredApisAvailable()) {\n      validateIndexedDBOpenable()\n        .then(isAvailable => {\n          if (isAvailable) {\n            setupTransportService();\n            getInitializationPromise(this).then(\n              () => setupOobResources(this),\n              () => setupOobResources(this)\n            );\n            this.initialized = true;\n          }\n        })\n        .catch(error => {\n          consoleLogger.info(`Environment doesn't support IndexedDB: ${error}`);\n        });\n    } else {\n      consoleLogger.info(\n        'Firebase Performance cannot start if the browser does not support ' +\n          '\"Fetch\" and \"Promise\", or cookies are disabled.'\n      );\n    }\n  }\n\n  set instrumentationEnabled(val: boolean) {\n    SettingsService.getInstance().instrumentationEnabled = val;\n  }\n  get instrumentationEnabled(): boolean {\n    return SettingsService.getInstance().instrumentationEnabled;\n  }\n\n  set dataCollectionEnabled(val: boolean) {\n    SettingsService.getInstance().dataCollectionEnabled = val;\n  }\n  get dataCollectionEnabled(): boolean {\n    return SettingsService.getInstance().dataCollectionEnabled;\n  }\n}\n", "/**\n * The Firebase Performance Monitoring Web SDK.\n * This SDK does not work in a Node.js environment.\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebasePerformance,\n  PerformanceSettings,\n  PerformanceTrace\n} from './public_types';\nimport { ERROR_FACTORY, ErrorCode } from './utils/errors';\nimport { setupApi } from './services/api_service';\nimport { PerformanceController } from './controllers/perf';\nimport {\n  _registerComponent,\n  _getProvider,\n  registerVersion,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport {\n  InstanceFactory,\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { name, version } from '../package.json';\nimport { Trace } from './resources/trace';\nimport '@firebase/installations';\nimport { deepEqual, getModularInstance } from '@firebase/util';\n\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\n * Returns a {@link FirebasePerformance} instance for the given app.\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n * @public\n */\nexport function getPerformance(\n  app: FirebaseApp = getApp()\n): FirebasePerformance {\n  app = getModularInstance(app);\n  const provider = _getProvider(app, 'performance');\n  const perfInstance = provider.getImmediate() as PerformanceController;\n  return perfInstance;\n}\n\n/**\n * Returns a {@link FirebasePerformance} instance for the given app. Can only be called once.\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n * @param settings - Optional settings for the {@link FirebasePerformance} instance.\n * @public\n */\nexport function initializePerformance(\n  app: FirebaseApp,\n  settings?: PerformanceSettings\n): FirebasePerformance {\n  app = getModularInstance(app);\n  const provider = _getProvider(app, 'performance');\n\n  // throw if an instance was already created.\n  // It could happen if initializePerformance() is called more than once, or getPerformance() is called first.\n  if (provider.isInitialized()) {\n    const existingInstance = provider.getImmediate();\n    const initialSettings = provider.getOptions() as PerformanceSettings;\n    if (deepEqual(initialSettings, settings ?? {})) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.ALREADY_INITIALIZED);\n    }\n  }\n\n  const perfInstance = provider.initialize({\n    options: settings\n  }) as PerformanceController;\n  return perfInstance;\n}\n\n/**\n * Returns a new `PerformanceTrace` instance.\n * @param performance - The {@link FirebasePerformance} instance to use.\n * @param name - The name of the trace.\n * @public\n */\nexport function trace(\n  performance: FirebasePerformance,\n  name: string\n): PerformanceTrace {\n  performance = getModularInstance(performance);\n  return new Trace(performance as PerformanceController, name);\n}\n\nconst factory: InstanceFactory<'performance'> = (\n  container: ComponentContainer,\n  { options: settings }: { options?: PerformanceSettings }\n) => {\n  // Dependencies\n  const app = container.getProvider('app').getImmediate();\n  const installations = container\n    .getProvider('installations-internal')\n    .getImmediate();\n\n  if (app.name !== DEFAULT_ENTRY_NAME) {\n    throw ERROR_FACTORY.create(ErrorCode.FB_NOT_DEFAULT);\n  }\n  if (typeof window === 'undefined') {\n    throw ERROR_FACTORY.create(ErrorCode.NO_WINDOW);\n  }\n  setupApi(window);\n  const perfInstance = new PerformanceController(app, installations);\n  perfInstance._init(settings);\n\n  return perfInstance;\n};\n\nfunction registerPerformance(): void {\n  _registerComponent(\n    new Component('performance', factory, ComponentType.PUBLIC)\n  );\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\nregisterPerformance();\n\nexport { FirebasePerformance, PerformanceSettings, PerformanceTrace };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA,IAAI;AAAJ,IAAM;AAAN,IAAQ,IAAE,WAAU;AAAC,MAAIA,KAAE,KAAK,eAAa,YAAY,oBAAkB,YAAY,iBAAiB,YAAY,EAAE,CAAC;AAAE,MAAGA,MAAGA,GAAE,gBAAc,KAAGA,GAAE,gBAAc,YAAY,IAAI;AAAE,WAAOA;AAAC;AAA5L,IAA8L,IAAE,SAASA,IAAE;AAAC,MAAG,cAAY,SAAS;AAAW,WAAM;AAAU,MAAIC,KAAE,EAAE;AAAE,MAAGA,IAAE;AAAC,QAAGD,KAAEC,GAAE;AAAe,aAAM;AAAU,QAAG,MAAIA,GAAE,8BAA4BD,KAAEC,GAAE;AAA2B,aAAM;AAAkB,QAAG,MAAIA,GAAE,eAAaD,KAAEC,GAAE;AAAY,aAAM;AAAA,EAAoB;AAAC,SAAM;AAAU;AAAle,IAAoe,IAAE,SAASD,IAAE;AAAC,MAAIC,KAAED,GAAE;AAAS,SAAO,MAAIA,GAAE,WAASC,GAAE,YAAY,IAAEA,GAAE,YAAY,EAAE,QAAQ,MAAK,EAAE;AAAC;AAAzkB,IAA2kB,IAAE,SAASD,IAAEC,IAAE;AAAC,MAAIC,KAAE;AAAG,MAAG;AAAC,WAAKF,MAAG,MAAIA,GAAE,YAAU;AAAC,UAAIG,KAAEH,IAAEI,KAAED,GAAE,KAAG,MAAIA,GAAE,KAAG,EAAEA,EAAC,KAAGA,GAAE,aAAWA,GAAE,UAAU,SAAOA,GAAE,UAAU,MAAM,KAAK,KAAGA,GAAE,UAAU,MAAM,KAAK,EAAE,SAAO,MAAIA,GAAE,UAAU,MAAM,KAAK,EAAE,QAAQ,QAAO,GAAG,IAAE;AAAI,UAAGD,GAAE,SAAOE,GAAE,UAAQH,MAAG,OAAK;AAAE,eAAOC,MAAGE;AAAE,UAAGF,KAAEA,KAAEE,KAAE,MAAIF,KAAEE,IAAED,GAAE;AAAG;AAAM,MAAAH,KAAEG,GAAE;AAAA,IAAU;AAAA,EAAC,SAAOH,IAAE;AAAA,EAAC;AAAC,SAAOE;AAAC;AAAx5B,IAA05B,IAAE;AAA55B,IAA+5B,IAAE,WAAU;AAAC,SAAO;AAAC;AAAp7B,IAAs7B,IAAE,SAASF,IAAE;AAAC,mBAAiB,YAAY,SAASC,IAAE;AAAC,IAAAA,GAAE,cAAY,IAAEA,GAAE,WAAUD,GAAEC,EAAC;AAAA,EAAE,GAAG,IAAE;AAAC;AAAphC,IAAshC,IAAE,WAAU;AAAC,MAAID,KAAE,EAAE;AAAE,SAAOA,MAAGA,GAAE,mBAAiB;AAAC;AAA3kC,IAA6kC,IAAE,SAASA,IAAEC,IAAE;AAAC,MAAIE,KAAE,EAAE,GAAEE,KAAE;AAAW,IAAE,KAAG,IAAEA,KAAE,uBAAqBF,OAAI,SAAS,gBAAc,EAAE,IAAE,IAAEE,KAAE,cAAY,SAAS,eAAaA,KAAE,YAAUF,GAAE,SAAOE,KAAEF,GAAE,KAAK,QAAQ,MAAK,GAAG;AAAI,SAAM,EAAC,MAAKH,IAAE,OAAM,WAASC,KAAE,KAAGA,IAAE,QAAO,QAAO,OAAM,GAAE,SAAQ,CAAC,GAAE,IAAG,MAAM,OAAO,KAAK,IAAI,GAAE,GAAG,EAAE,OAAO,KAAK,MAAM,gBAAc,KAAK,OAAO,CAAC,IAAE,IAAI,GAAE,gBAAeI,GAAC;AAAC;AAAp7C,IAAs7C,IAAE,SAASL,IAAEC,IAAEC,IAAE;AAAC,MAAG;AAAC,QAAG,oBAAoB,oBAAoB,SAASF,EAAC,GAAE;AAAC,UAAIG,KAAE,IAAI,oBAAqB,SAASH,IAAE;AAAC,gBAAQ,QAAQ,EAAE,KAAM,WAAU;AAAC,UAAAC,GAAED,GAAE,WAAW,CAAC;AAAA,QAAC,CAAE;AAAA,MAAC,CAAE;AAAE,aAAOG,GAAE,QAAQ,OAAO,OAAO,EAAC,MAAKH,IAAE,UAAS,KAAE,GAAEE,MAAG,CAAC,CAAC,CAAC,GAAEC;AAAA,IAAC;AAAA,EAAC,SAAOH,IAAE;AAAA,EAAC;AAAC;AAAnrD,IAAqrD,IAAE,SAASA,IAAEC,IAAEC,IAAEC,IAAE;AAAC,MAAIE,IAAED;AAAE,SAAO,SAASE,IAAE;AAAC,IAAAL,GAAE,SAAO,MAAIK,MAAGH,SAAMC,KAAEH,GAAE,SAAOI,MAAG,OAAK,WAASA,QAAKA,KAAEJ,GAAE,OAAMA,GAAE,QAAMG,IAAEH,GAAE,SAAO,SAASD,IAAEC,IAAE;AAAC,aAAOD,KAAEC,GAAE,CAAC,IAAE,SAAOD,KAAEC,GAAE,CAAC,IAAE,sBAAoB;AAAA,IAAM,EAAEA,GAAE,OAAMC,EAAC,GAAEF,GAAEC,EAAC;AAAA,EAAE;AAAC;AAA/4D,IAAi5D,IAAE,SAASD,IAAE;AAAC,wBAAuB,WAAU;AAAC,WAAO,sBAAuB,WAAU;AAAC,aAAOA,GAAE;AAAA,IAAC,CAAE;AAAA,EAAC,CAAE;AAAC;AAA1/D,IAA4/D,IAAE,SAASA,IAAE;AAAC,WAAS,iBAAiB,oBAAoB,WAAU;AAAC,iBAAW,SAAS,mBAAiBA,GAAE;AAAA,EAAC,CAAE;AAAC;AAA9mE,IAAgnE,IAAE,SAASA,IAAE;AAAC,MAAIC,KAAE;AAAG,SAAO,WAAU;AAAC,IAAAA,OAAID,GAAE,GAAEC,KAAE;AAAA,EAAG;AAAC;AAAvqE,IAAyqE,IAAE;AAA3qE,IAA8qE,IAAE,WAAU;AAAC,SAAM,aAAW,SAAS,mBAAiB,SAAS,eAAa,IAAE,IAAE;AAAC;AAAjwE,IAAmwE,IAAE,SAASD,IAAE;AAAC,eAAW,SAAS,mBAAiB,IAAE,OAAK,IAAE,uBAAqBA,GAAE,OAAKA,GAAE,YAAU,GAAE,EAAE;AAAE;AAA72E,IAA+2E,IAAE,WAAU;AAAC,mBAAiB,oBAAmB,GAAE,IAAE,GAAE,iBAAiB,sBAAqB,GAAE,IAAE;AAAC;AAAj9E,IAAm9E,IAAE,WAAU;AAAC,sBAAoB,oBAAmB,GAAE,IAAE,GAAE,oBAAoB,sBAAqB,GAAE,IAAE;AAAC;AAA3jF,IAA6jF,IAAE,WAAU;AAAC,SAAO,IAAE,MAAI,IAAE,EAAE,GAAE,EAAE,GAAE,EAAG,WAAU;AAAC,eAAY,WAAU;AAAC,UAAE,EAAE,GAAE,EAAE;AAAA,IAAC,GAAG,CAAC;AAAA,EAAC,CAAE,IAAG,EAAC,IAAI,kBAAiB;AAAC,WAAO;AAAA,EAAC,EAAC;AAAC;AAA1rF,IAA4rF,IAAE,SAASA,IAAE;AAAC,WAAS,eAAa,iBAAiB,sBAAsB,WAAU;AAAC,WAAOA,GAAE;AAAA,EAAC,GAAG,IAAE,IAAEA,GAAE;AAAC;AAAtyF,IAAwyF,IAAE,CAAC,MAAK,GAAG;AAAnzF,IAAqzF,IAAE,SAASA,IAAEC,IAAE;AAAC,EAAAA,KAAEA,MAAG,CAAC,GAAE,EAAG,WAAU;AAAC,QAAIC,IAAEC,KAAE,EAAE,GAAEE,KAAE,EAAE,KAAK,GAAED,KAAE,EAAE,SAAS,SAASJ,IAAE;AAAC,MAAAA,GAAE,QAAS,SAASA,IAAE;AAAC,qCAA2BA,GAAE,SAAOI,GAAE,WAAW,GAAEJ,GAAE,YAAUG,GAAE,oBAAkBE,GAAE,QAAM,KAAK,IAAIL,GAAE,YAAU,EAAE,GAAE,CAAC,GAAEK,GAAE,QAAQ,KAAKL,EAAC,GAAEE,GAAE,IAAE;AAAA,MAAG,CAAE;AAAA,IAAC,CAAE;AAAE,IAAAE,OAAIF,KAAE,EAAEF,IAAEK,IAAE,GAAEJ,GAAE,gBAAgB,GAAE,EAAG,SAASE,IAAE;AAAC,MAAAE,KAAE,EAAE,KAAK,GAAEH,KAAE,EAAEF,IAAEK,IAAE,GAAEJ,GAAE,gBAAgB,GAAE,EAAG,WAAU;AAAC,QAAAI,GAAE,QAAM,YAAY,IAAI,IAAEF,GAAE,WAAUD,GAAE,IAAE;AAAA,MAAC,CAAE;AAAA,IAAC,CAAE;AAAA,EAAE,CAAE;AAAC;AAAttG,IAAwtG,IAAE,CAAC,KAAG,IAAG;AAAjuG,IAAmuG,IAAE,SAASF,IAAEC,IAAE;AAAC,GAAC,SAASD,IAAEC,IAAE;AAAC,IAAAA,KAAEA,MAAG,CAAC,GAAE,EAAE,EAAG,WAAU;AAAC,UAAIC,IAAEC,KAAE,EAAE,OAAM,CAAC,GAAEE,KAAE,GAAED,KAAE,CAAC,GAAEE,KAAE,SAASN,IAAE;AAAC,QAAAA,GAAE,QAAS,SAASA,IAAE;AAAC,cAAG,CAACA,GAAE,gBAAe;AAAC,gBAAIC,KAAEG,GAAE,CAAC,GAAEF,KAAEE,GAAEA,GAAE,SAAO,CAAC;AAAE,YAAAC,MAAGL,GAAE,YAAUE,GAAE,YAAU,OAAKF,GAAE,YAAUC,GAAE,YAAU,OAAKI,MAAGL,GAAE,OAAMI,GAAE,KAAKJ,EAAC,MAAIK,KAAEL,GAAE,OAAMI,KAAE,CAACJ,EAAC;AAAA,UAAE;AAAA,QAAC,CAAE,GAAEK,KAAEF,GAAE,UAAQA,GAAE,QAAME,IAAEF,GAAE,UAAQC,IAAEF,GAAE;AAAA,MAAE,GAAEK,KAAE,EAAE,gBAAeD,EAAC;AAAE,MAAAC,OAAIL,KAAE,EAAEF,IAAEG,IAAE,GAAEF,GAAE,gBAAgB,GAAE,EAAG,WAAU;AAAC,QAAAK,GAAEC,GAAE,YAAY,CAAC,GAAEL,GAAE,IAAE;AAAA,MAAC,CAAE,GAAE,EAAG,WAAU;AAAC,QAAAG,KAAE,GAAEF,KAAE,EAAE,OAAM,CAAC,GAAED,KAAE,EAAEF,IAAEG,IAAE,GAAEF,GAAE,gBAAgB,GAAE,EAAG,WAAU;AAAC,iBAAOC,GAAE;AAAA,QAAC,CAAE;AAAA,MAAC,CAAE,GAAE,WAAWA,IAAE,CAAC;AAAA,IAAE,CAAE,CAAC;AAAA,EAAC,EAAG,SAASD,IAAE;AAAC,QAAIC,KAAE,SAASF,IAAE;AAAC,UAAIC,IAAEC,KAAE,CAAC;AAAE,UAAGF,GAAE,QAAQ,QAAO;AAAC,YAAIK,KAAEL,GAAE,QAAQ,OAAQ,SAASA,IAAEC,IAAE;AAAC,iBAAOD,MAAGA,GAAE,QAAMC,GAAE,QAAMD,KAAEC;AAAA,QAAC,CAAE;AAAE,YAAGI,MAAGA,GAAE,WAASA,GAAE,QAAQ,QAAO;AAAC,cAAIC,MAAGL,KAAEI,GAAE,SAAS,KAAM,SAASL,IAAE;AAAC,mBAAOA,GAAE,QAAM,MAAIA,GAAE,KAAK;AAAA,UAAQ,CAAE,KAAGC,GAAE,CAAC;AAAE,UAAAK,OAAIJ,KAAE,EAAC,oBAAmB,EAAEI,GAAE,IAAI,GAAE,kBAAiBD,GAAE,WAAU,mBAAkBA,GAAE,OAAM,oBAAmBC,IAAE,mBAAkBD,IAAE,WAAU,EAAEA,GAAE,SAAS,EAAC;AAAA,QAAE;AAAA,MAAC;AAAC,aAAO,OAAO,OAAOL,IAAE,EAAC,aAAYE,GAAC,CAAC;AAAA,IAAC,EAAED,EAAC;AAAE,IAAAD,GAAEE,EAAC;AAAA,EAAC,GAAGD,EAAC;AAAC;AAAjsI,IAA8lJ,IAAE;AAAhmJ,IAAkmJ,IAAE,IAAE;AAAtmJ,IAAwmJ,IAAE;AAA1mJ,IAA4mJ,IAAE,SAASO,IAAE;AAAC,EAAAA,GAAE,QAAS,SAASA,IAAE;AAAC,IAAAA,GAAE,kBAAgB,IAAE,KAAK,IAAI,GAAEA,GAAE,aAAa,GAAE,IAAE,KAAK,IAAI,GAAEA,GAAE,aAAa,GAAE,IAAE,KAAG,IAAE,KAAG,IAAE,IAAE;AAAA,EAAE,CAAE;AAAC;AAAlvJ,IAAovJ,IAAE,WAAU;AAAC,SAAO,IAAE,IAAE,YAAY,oBAAkB;AAAC;AAA3yJ,IAA6yJ,IAAE,WAAU;AAAC,wBAAqB,eAAa,MAAI,IAAE,EAAE,SAAQ,GAAE,EAAC,MAAK,SAAQ,UAAS,MAAG,mBAAkB,EAAC,CAAC;AAAE;AAA95J,IAAg6J,IAAE,CAAC;AAAn6J,IAAq6J,IAAE,oBAAI;AAA36J,IAA+6J,IAAE;AAAj7J,IAAm7J,IAAE,WAAU;AAAC,MAAIA,KAAE,KAAK,IAAI,EAAE,SAAO,GAAE,KAAK,OAAO,EAAE,IAAE,KAAG,EAAE,CAAC;AAAE,SAAO,EAAEA,EAAC;AAAC;AAA7/J,IAA+/J,IAAE,CAAC;AAAlgK,IAAogK,IAAE,SAASA,IAAE;AAAC,MAAG,EAAE,QAAS,SAASC,IAAE;AAAC,WAAOA,GAAED,EAAC;AAAA,EAAC,CAAE,GAAEA,GAAE,iBAAe,kBAAgBA,GAAE,WAAU;AAAC,QAAIC,KAAE,EAAE,EAAE,SAAO,CAAC,GAAEC,KAAE,EAAE,IAAIF,GAAE,aAAa;AAAE,QAAGE,MAAG,EAAE,SAAO,MAAIF,GAAE,WAASC,GAAE,SAAQ;AAAC,UAAGC;AAAE,QAAAF,GAAE,WAASE,GAAE,WAASA,GAAE,UAAQ,CAACF,EAAC,GAAEE,GAAE,UAAQF,GAAE,YAAUA,GAAE,aAAWE,GAAE,WAASF,GAAE,cAAYE,GAAE,QAAQ,CAAC,EAAE,aAAWA,GAAE,QAAQ,KAAKF,EAAC;AAAA,WAAM;AAAC,YAAIG,KAAE,EAAC,IAAGH,GAAE,eAAc,SAAQA,GAAE,UAAS,SAAQ,CAACA,EAAC,EAAC;AAAE,UAAE,IAAIG,GAAE,IAAGA,EAAC,GAAE,EAAE,KAAKA,EAAC;AAAA,MAAC;AAAC,QAAE,KAAM,SAASH,IAAEC,IAAE;AAAC,eAAOA,GAAE,UAAQD,GAAE;AAAA,MAAO,CAAE,GAAE,EAAE,SAAO,MAAI,EAAE,OAAO,EAAE,EAAE,QAAS,SAASA,IAAE;AAAC,eAAO,EAAE,OAAOA,GAAE,EAAE;AAAA,MAAC,CAAE;AAAA,IAAC;AAAA,EAAC;AAAC;AAAliL,IAAoiL,IAAE,SAASA,IAAE;AAAC,MAAIC,KAAE,KAAK,uBAAqB,KAAK,YAAWC,KAAE;AAAG,SAAOF,KAAE,EAAEA,EAAC,GAAE,aAAW,SAAS,kBAAgBA,GAAE,KAAGE,KAAED,GAAED,EAAC,GAAE,EAAEA,EAAC,IAAGE;AAAC;AAA5qL,IAA8qL,IAAE,CAAC,KAAI,GAAG;AAAxrL,IAA0rL,IAAE,SAASF,IAAEC,IAAE;AAAC,8BAA2B,QAAM,mBAAkB,uBAAuB,cAAYA,KAAEA,MAAG,CAAC,GAAE,EAAG,WAAU;AAAC,QAAIC;AAAE,MAAE;AAAE,QAAIC,IAAEC,KAAE,EAAE,KAAK,GAAEC,KAAE,SAASL,IAAE;AAAC,QAAG,WAAU;AAAC,QAAAA,GAAE,QAAQ,CAAC;AAAE,YAAIC,KAAE,EAAE;AAAE,QAAAA,MAAGA,GAAE,YAAUG,GAAE,UAAQA,GAAE,QAAMH,GAAE,SAAQG,GAAE,UAAQH,GAAE,SAAQE,GAAE;AAAA,MAAE,CAAE;AAAA,IAAC,GAAEG,KAAE,EAAE,SAAQD,IAAE,EAAC,mBAAkB,UAAQH,KAAED,GAAE,sBAAoB,WAASC,KAAEA,KAAE,GAAE,CAAC;AAAE,IAAAC,KAAE,EAAEH,IAAEI,IAAE,GAAEH,GAAE,gBAAgB,GAAEK,OAAIA,GAAE,QAAQ,EAAC,MAAK,eAAc,UAAS,KAAE,CAAC,GAAE,EAAG,WAAU;AAAC,MAAAD,GAAEC,GAAE,YAAY,CAAC,GAAEH,GAAE,IAAE;AAAA,IAAC,CAAE,GAAE,EAAG,WAAU;AAAC,UAAE,EAAE,GAAE,EAAE,SAAO,GAAE,EAAE,MAAM,GAAEC,KAAE,EAAE,KAAK,GAAED,KAAE,EAAEH,IAAEI,IAAE,GAAEH,GAAE,gBAAgB;AAAA,IAAC,CAAE;AAAA,EAAE,CAAE;AAAE;AAAhvM,IAAkvM,IAAE,CAAC;AAArvM,IAAuvM,IAAE,CAAC;AAA1vM,IAA4vM,IAAE;AAA9vM,IAAgwM,IAAE,oBAAI;AAAtwM,IAA8wM,IAAE,oBAAI;AAApxM,IAAwxM,IAAE;AAA1xM,IAA6xM,IAAE,SAASD,IAAE;AAAC,MAAE,EAAE,OAAOA,EAAC,GAAE,EAAE;AAAC;AAA5zM,IAA8zM,IAAE,WAAU;AAAC,MAAE,MAAI,IAAE,EAAE,CAAC;AAAE;AAAx1M,IAA01M,IAAE,WAAU;AAAC,IAAE,OAAK,MAAI,EAAE,QAAS,SAASA,IAAEC,IAAE;AAAC,MAAE,IAAIA,EAAC,KAAG,EAAE,OAAOA,EAAC;AAAA,EAAC,CAAE;AAAE,MAAID,KAAE,EAAE,IAAK,SAASA,IAAE;AAAC,WAAO,EAAE,IAAIA,GAAE,QAAQ,CAAC,CAAC;AAAA,EAAC,CAAE,GAAEC,KAAE,EAAE,SAAO;AAAG,MAAE,EAAE,OAAQ,SAASC,IAAEC,IAAE;AAAC,WAAOA,MAAGF,MAAGD,GAAE,SAASE,EAAC;AAAA,EAAC,CAAE;AAAE,WAAQA,KAAE,oBAAI,OAAIC,KAAE,GAAEA,KAAE,EAAE,QAAOA,MAAI;AAAC,QAAIC,KAAE,EAAED,EAAC;AAAE,OAAGC,GAAE,WAAUA,GAAE,aAAa,EAAE,QAAS,SAASJ,IAAE;AAAC,MAAAE,GAAE,IAAIF,EAAC;AAAA,IAAC,CAAE;AAAA,EAAC;AAAC,MAAIK,KAAE,EAAE,SAAO,IAAE;AAAG,MAAE,EAAE,OAAQ,SAASL,IAAEC,IAAE;AAAC,WAAOD,GAAE,YAAU,KAAGC,KAAEI,MAAGH,GAAE,IAAIF,EAAC;AAAA,EAAC,CAAE,GAAE,IAAE;AAAE;AAAE,EAAE,KAAM,SAASA,IAAE;AAAC,EAAAA,GAAE,iBAAeA,GAAE,UAAQ,CAAC,EAAE,IAAIA,GAAE,aAAa,KAAG,EAAE,IAAIA,GAAE,eAAcA,GAAE,MAAM;AAAC,GAAI,SAASA,IAAE;AAAC,MAAIC,IAAEC,KAAEF,GAAE,YAAUA,GAAE;AAAS,MAAE,KAAK,IAAI,GAAEA,GAAE,aAAa;AAAE,WAAQG,KAAE,EAAE,SAAO,GAAEA,MAAG,GAAEA,MAAI;AAAC,QAAIC,KAAE,EAAED,EAAC;AAAE,QAAG,KAAK,IAAID,KAAEE,GAAE,UAAU,KAAG,GAAE;AAAC,OAACH,KAAEG,IAAG,YAAU,KAAK,IAAIJ,GAAE,WAAUC,GAAE,SAAS,GAAEA,GAAE,kBAAgB,KAAK,IAAID,GAAE,iBAAgBC,GAAE,eAAe,GAAEA,GAAE,gBAAc,KAAK,IAAID,GAAE,eAAcC,GAAE,aAAa,GAAEA,GAAE,QAAQ,KAAKD,EAAC;AAAE;AAAA,IAAK;AAAA,EAAC;AAAC,EAAAC,OAAIA,KAAE,EAAC,WAAUD,GAAE,WAAU,iBAAgBA,GAAE,iBAAgB,eAAcA,GAAE,eAAc,YAAWE,IAAE,SAAQ,CAACF,EAAC,EAAC,GAAE,EAAE,KAAKC,EAAC,KAAID,GAAE,iBAAe,kBAAgBA,GAAE,cAAY,EAAE,IAAIA,IAAEC,EAAC,GAAE,EAAE;AAAC,CAAE;AAAE,IAAc,KAAG,SAASM,IAAEC,IAAE;AAAC,WAAQC,IAAEC,KAAE,CAAC,GAAEC,KAAE,GAAEF,KAAE,EAAEE,EAAC,GAAEA;AAAI,QAAG,EAAEF,GAAE,YAAUA,GAAE,WAASF,KAAG;AAAC,UAAGE,GAAE,YAAUD;AAAE;AAAM,MAAAE,GAAE,KAAKD,EAAC;AAAA,IAAC;AAAC,SAAOC;AAAC;AAAtI,IAAwI,KAAG,SAASH,IAAEE,IAAE;AAAC,QAAI,IAAE,EAAE,wBAAuB,CAAC,IAAG,EAAG,SAASD,IAAE;AAAC,QAAIC,KAAE,SAASF,IAAE;AAAC,UAAIC,KAAED,GAAE,QAAQ,CAAC,GAAEE,KAAE,EAAE,IAAID,EAAC,GAAEG,KAAEH,GAAE,iBAAgBI,KAAEH,GAAE,eAAcI,KAAEJ,GAAE,QAAQ,KAAM,SAASF,IAAEC,IAAE;AAAC,eAAOD,GAAE,kBAAgBC,GAAE;AAAA,MAAe,CAAE,GAAEM,KAAE,GAAGN,GAAE,WAAUI,EAAC,GAAEG,KAAER,GAAE,QAAQ,KAAM,SAASA,IAAE;AAAC,eAAOA,GAAE;AAAA,MAAM,CAAE,GAAES,KAAED,MAAGA,GAAE,UAAQ,EAAE,IAAIP,GAAE,aAAa,GAAES,KAAE,CAACT,GAAE,YAAUA,GAAE,UAASI,EAAC,EAAE,OAAOE,GAAE,IAAK,SAASP,IAAE;AAAC,eAAOA,GAAE,YAAUA,GAAE;AAAA,MAAQ,CAAE,CAAC,GAAEW,KAAE,KAAK,IAAI,MAAM,MAAKD,EAAC,GAAEE,KAAE,EAAC,mBAAkB,EAAEH,EAAC,GAAE,0BAAyBA,IAAE,iBAAgBR,GAAE,KAAK,WAAW,KAAK,IAAE,aAAW,WAAU,iBAAgBA,GAAE,WAAU,eAAcU,IAAE,uBAAsBL,IAAE,2BAA0BC,IAAE,YAAWH,KAAEH,GAAE,WAAU,oBAAmBI,KAAED,IAAE,mBAAkB,KAAK,IAAIO,KAAEN,IAAE,CAAC,GAAE,WAAU,EAAEJ,GAAE,SAAS,EAAC;AAAE,aAAO,OAAO,OAAOD,IAAE,EAAC,aAAYY,GAAC,CAAC;AAAA,IAAC,EAAEX,EAAC;AAAE,IAAAD,GAAEE,EAAC;AAAA,EAAC,GAAGA,EAAC;AAAC;AAAh8B,IAAk8B,KAAG,CAAC,MAAK,GAAG;AAA98B,IAAg9B,KAAG,CAAC;AAAp9B,IAAs9B,KAAG,SAASF,IAAEC,IAAE;AAAC,GAAC,SAASD,IAAEC,IAAE;AAAC,IAAAA,KAAEA,MAAG,CAAC,GAAE,EAAG,WAAU;AAAC,UAAIC,IAAEC,KAAE,EAAE,GAAEC,KAAE,EAAE,KAAK,GAAES,KAAE,SAASb,IAAE;AAAC,QAAAC,GAAE,qBAAmBD,KAAEA,GAAE,MAAM,EAAE,IAAGA,GAAE,QAAS,SAASA,IAAE;AAAC,UAAAA,GAAE,YAAUG,GAAE,oBAAkBC,GAAE,QAAM,KAAK,IAAIJ,GAAE,YAAU,EAAE,GAAE,CAAC,GAAEI,GAAE,UAAQ,CAACJ,EAAC,GAAEE,GAAE;AAAA,QAAE,CAAE;AAAA,MAAC,GAAEG,KAAE,EAAE,4BAA2BQ,EAAC;AAAE,UAAGR,IAAE;AAAC,QAAAH,KAAE,EAAEF,IAAEI,IAAE,IAAGH,GAAE,gBAAgB;AAAE,YAAIK,KAAE,EAAG,WAAU;AAAC,aAAGF,GAAE,EAAE,MAAIS,GAAER,GAAE,YAAY,CAAC,GAAEA,GAAE,WAAW,GAAE,GAAGD,GAAE,EAAE,IAAE,MAAGF,GAAE,IAAE;AAAA,QAAE,CAAE;AAAE,SAAC,WAAU,OAAO,EAAE,QAAS,SAASF,IAAE;AAAC,2BAAiBA,IAAG,WAAU;AAAC,mBAAO,EAAEM,EAAC;AAAA,UAAC,GAAG,EAAC,MAAK,MAAG,SAAQ,KAAE,CAAC;AAAA,QAAC,CAAE,GAAE,EAAEA,EAAC,GAAE,EAAG,SAASH,IAAE;AAAC,UAAAC,KAAE,EAAE,KAAK,GAAEF,KAAE,EAAEF,IAAEI,IAAE,IAAGH,GAAE,gBAAgB,GAAE,EAAG,WAAU;AAAC,YAAAG,GAAE,QAAM,YAAY,IAAI,IAAED,GAAE,WAAU,GAAGC,GAAE,EAAE,IAAE,MAAGF,GAAE,IAAE;AAAA,UAAC,CAAE;AAAA,QAAC,CAAE;AAAA,MAAC;AAAA,IAAC,CAAE;AAAA,EAAC,EAAG,SAASD,IAAE;AAAC,QAAIE,KAAE,SAASH,IAAE;AAAC,UAAIC,KAAE,EAAC,iBAAgB,GAAE,mBAAkB,GAAE,sBAAqB,GAAE,oBAAmBD,GAAE,MAAK;AAAE,UAAGA,GAAE,QAAQ,QAAO;AAAC,YAAIG,KAAE,EAAE;AAAE,YAAGA,IAAE;AAAC,cAAIC,KAAED,GAAE,mBAAiB,GAAEE,KAAEL,GAAE,QAAQA,GAAE,QAAQ,SAAO,CAAC,GAAEM,KAAED,GAAE,OAAK,YAAY,iBAAiB,UAAU,EAAE,OAAQ,SAASL,IAAE;AAAC,mBAAOA,GAAE,SAAOK,GAAE;AAAA,UAAG,CAAE,EAAE,CAAC,GAAEE,KAAE,KAAK,IAAI,GAAEJ,GAAE,gBAAcC,EAAC,GAAEI,KAAE,KAAK,IAAID,IAAED,MAAGA,GAAE,gBAAcA,GAAE,aAAWF,KAAE,CAAC,GAAEK,KAAE,KAAK,IAAID,IAAEF,KAAEA,GAAE,cAAYF,KAAE,CAAC,GAAEM,KAAE,KAAK,IAAID,IAAEJ,GAAE,YAAUD,EAAC;AAAE,UAAAH,KAAE,EAAC,SAAQ,EAAEI,GAAE,OAAO,GAAE,iBAAgBE,IAAE,mBAAkBC,KAAED,IAAE,sBAAqBE,KAAED,IAAE,oBAAmBE,KAAED,IAAE,iBAAgBN,IAAE,UAASE,GAAC,GAAEA,GAAE,QAAMJ,GAAE,MAAII,GAAE,MAAKC,OAAIL,GAAE,mBAAiBK;AAAA,QAAE;AAAA,MAAC;AAAC,aAAO,OAAO,OAAON,IAAE,EAAC,aAAYC,GAAC,CAAC;AAAA,IAAC,EAAEA,EAAC;AAAE,IAAAD,GAAEG,EAAC;AAAA,EAAC,GAAGF,EAAC;AAAC;;;;;ACmBrpT,IAAM,cAAc;AAEpB,IAAM,0BAA0B;AAEhC,IAAM,yBAAyB;AAE/B,IAAM,uBAAuB;AAE7B,IAAM,6BAA6B;AAEnC,IAAM,2BAA2B;AAEjC,IAAM,sCAAsC;AAE5C,IAAM,iCAAiC;AAEvC,IAAM,uCAAuC;AAC7C,IAAM,0CAA0C;AAEhD,IAAM,wCAAwC;AAC9C,IAAM,2CAA2C;AAEjD,IAAM,sCAAsC;AAC5C,IAAM,yCAAyC;AAE/C,IAAM,2BAA2B;AAEjC,IAAM,kCACX;AAEK,IAAM,UAAU;AAChB,IAAM,eAAe;ACX5B,IAAM,wBAAiE;EACrE;IAAA;;EAAA,GAAkC;EAClC;IAAA;;EAAA,GAAkC;EAClC;IAAA;;EAAA,GACE;EACF;IAAA;;EAAA,GACE;EACF;IAAA;;EAAA,GAAuB;EACvB;IAAA;;EAAA,GAAuB;EACvB;IAAA;;EAAA,GAA2B;EAC3B;IAAA;;EAAA,GAAwB;EACxB;IAAA;;EAAA,GAA4B;EAC5B;IAAA;;EAAA,GACE;EACF;IAAA;;EAAA,GAAuB;EACvB;IAAA;;EAAA,GACE;EACF;IAAA;;EAAA,GACE;EACF;IAAA;;EAAA,GACE;EACF;IAAA;;EAAA,GACE;EACF;IAAA;;EAAA,GACE;;AAgBG,IAAM,gBAAgB,IAAI,aAC/B,SACA,cACA,qBAAqB;AC9DhB,IAAM,gBAAgB,IAAI,OAAO,YAAY;AACpD,cAAc,WAAW,SAAS;ACelC,IAAI;AACJ,IAAI;IAcS,YAAA,KAAG;EAad,YAAqBa,SAAe;AAAf,SAAM,SAANA;AACnB,QAAI,CAACA,SAAQ;AACX,YAAM,cAAc;QAAM;;MAAA;;AAE5B,SAAK,cAAcA,QAAO;AAC1B,SAAK,sBAAsBA,QAAO;AAClC,SAAK,iBAAiBA,QAAO;AAC7B,SAAK,YAAYA,QAAO;AACxB,SAAK,WAAWA,QAAO;AACvB,QAAI,KAAK,aAAa,KAAK,UAAU,eAAe;AAGlD,WAAK,eAAeA,QAAO;;AAE7B,QAAIA,QAAO,eAAeA,QAAO,YAAY,mBAAmB;AAC9D,WAAK,oBAAoBA,QAAO,YAAY;;AAE9C,SAAK,QAAQC;AACb,SAAK,QAAQC;AACb,SAAK,QAAQC;;EAGf,SAAM;AAEJ,WAAO,KAAK,eAAe,KAAK,MAAM,GAAG,EAAE,CAAC;;EAG9C,KAAKC,OAAY;AACf,QAAI,CAAC,KAAK,eAAe,CAAC,KAAK,YAAY,MAAM;AAC/C;;AAEF,SAAK,YAAY,KAAKA,KAAI;;EAG5B,QAAQ,aAAqB,OAAe,OAAa;AACvD,QAAI,CAAC,KAAK,eAAe,CAAC,KAAK,YAAY,SAAS;AAClD;;AAEF,SAAK,YAAY,QAAQ,aAAa,OAAO,KAAK;;EAGpD,iBAAiB,MAAe;AAC9B,QAAI,CAAC,KAAK,eAAe,CAAC,KAAK,YAAY,kBAAkB;AAC3D,aAAO,CAAA;;AAET,WAAO,KAAK,YAAY,iBAAiB,IAAI;;EAG/C,iBAAiBA,OAAY;AAC3B,QAAI,CAAC,KAAK,eAAe,CAAC,KAAK,YAAY,kBAAkB;AAC3D,aAAO,CAAA;;AAET,WAAO,KAAK,YAAY,iBAAiBA,KAAI;;EAG/C,gBAAa;AAEX,WACE,KAAK,gBACJ,KAAK,YAAY,cAAc,KAAK,YAAY,OAAO;;EAI5D,wBAAqB;AACnB,QAAI,CAAC,SAAS,CAAC,WAAW,CAAC,kBAAiB,GAAI;AAC9C,oBAAc,KACZ,wGAAwG;AAE1G,aAAO;;AAGT,QAAI,CAAC,qBAAoB,GAAI;AAC3B,oBAAc,KAAK,+CAA+C;AAClE,aAAO;;AAET,WAAO;;EAGT,cACE,WACA,UAA2C;AAE3C,QAAI,CAAC,KAAK,qBAAqB;AAC7B;;AAEF,UAAM,WAAW,IAAI,KAAK,oBAAoB,UAAO;AACnD,iBAAW,SAAS,KAAK,WAAU,GAAI;AAErC,iBAAS,KAAK;;IAElB,CAAC;AAGD,aAAS,QAAQ,EAAE,YAAY,CAAC,SAAS,EAAC,CAAE;;EAG9C,OAAO,cAAW;AAChB,QAAI,gBAAgB,QAAW;AAC7B,oBAAc,IAAI,KAAI,cAAc;;AAEtC,WAAO;;AAEV;AAEK,SAAU,SAASJ,SAAc;AACrC,mBAAiBA;AACnB;ACvJA,IAAI;AAGE,SAAU,cACd,sBAAoD;AAEpD,QAAM,aAAa,qBAAqB,MAAK;AAE7C,aAAW,KAAK,CAAC,WAAkB;AACjC,UAAM;EACR,CAAC;AACD,SAAO;AACT;SAGgB,SAAM;AACpB,SAAO;AACT;AAEM,SAAU,oBACd,sBAAoD;AAEpD,QAAM,mBAAmB,qBAAqB,SAAQ;AAEtD,mBAAiB,KAAK,CAAC,iBAAwB;EAE/C,CAAC;AACD,SAAO;AACT;AC5BgB,SAAA,aAAa,OAAe,OAAa;AACvD,QAAM,WAAW,MAAM,SAAS,MAAM;AACtC,MAAI,WAAW,KAAK,WAAW,GAAG;AAChC,UAAM,cAAc;MAAM;;IAAA;;AAG5B,QAAM,cAAc,CAAA;AACpB,WAASK,KAAI,GAAGA,KAAI,MAAM,QAAQA,MAAK;AACrC,gBAAY,KAAK,MAAM,OAAOA,EAAC,CAAC;AAChC,QAAI,MAAM,SAASA,IAAG;AACpB,kBAAY,KAAK,MAAM,OAAOA,EAAC,CAAC;;;AAIpC,SAAO,YAAY,KAAK,EAAE;AAC5B;ACfA,IAAI;IAES,wBAAA,iBAAe;EAA5B,cAAA;AAEE,SAAsB,yBAAG;AAGzB,SAAqB,wBAAG;AAGxB,SAAc,iBAAG;AAEjB,SAAkB,qBAAG;AACrB,SAA2B,8BAAG;AAG9B,SAAc,iBACZ;AAGF,SAAA,yBAAyB,aACvB,oCACA,iCAAiC;AAGnC,SAAA,eAAe,aAAa,wBAAwB,qBAAqB;AAGzE,SAAS,YAAG;AAGZ,SAAqB,wBAAG;AACxB,SAAuB,0BAAG;AAG1B,SAAgB,mBAAG;;EAEnB,wBAAqB;AACnB,WAAO,KAAK,uBAAuB,OAAO,SAAS,KAAK,YAAY;;EAGtE,OAAO,cAAW;AAChB,QAAI,4BAA4B,QAAW;AACzC,gCAA0B,IAAI,iBAAe;;AAE/C,WAAO;;AAEV;ACvCD,IAAY;CAAZ,SAAYC,kBAAe;AACzB,EAAAA,iBAAAA,iBAAA,SAAA,IAAA,CAAA,IAAA;AACA,EAAAA,iBAAAA,iBAAA,SAAA,IAAA,CAAA,IAAA;AACA,EAAAA,iBAAAA,iBAAA,QAAA,IAAA,CAAA,IAAA;AACF,GAJY,oBAAA,kBAIX,CAAA,EAAA;AAsCD,IAAM,8BAA8B,CAAC,aAAa,WAAW,KAAK;AAClE,IAAM,yBAAyB,IAAI,OAAO,gBAAgB;AAC1D,IAAM,4BAA4B;AAClC,IAAM,6BAA6B;SAEnB,yBAAsB;AACpC,QAAMC,aAAY,IAAI,YAAW,EAAG;AACpC,MAAIA,eAAS,QAATA,eAAS,SAAA,SAATA,WAAW,eAAe;AAC5B,QAAIA,WAAU,cAAc,YAAY;AACtC,aAAsC;WACjC;AACL,aAAwC;;SAErC;AACL,WAAuC;;AAE3C;SAEgB,qBAAkB;AAChC,QAAMC,YAAW,IAAI,YAAW,EAAG;AACnC,QAAM,kBAAkBA,UAAS;AACjC,UAAQ,iBAAe;IACrB,KAAK;AACH,aAAO,gBAAgB;IACzB,KAAK;AACH,aAAO,gBAAgB;IACzB;AACE,aAAO,gBAAgB;;AAE7B;SAEgB,6BAA0B;AACxC,QAAMD,aAAY,IAAI,YAAW,EAAG;AACpC,QAAM,sBAAuBA,WAAsC;AACnE,QAAM,gBACJ,uBAAuB,oBAAoB;AAC7C,UAAQ,eAAa;IACnB,KAAK;AACH,aAAkD;IACpD,KAAK;AACH,aAA6C;IAC/C,KAAK;AACH,aAA6C;IAC/C,KAAK;AACH,aAA6C;IAC/C;AACE,aAAuC;;AAE7C;AAEM,SAAU,2BAA2BH,OAAY;AACrD,MAAIA,MAAK,WAAW,KAAKA,MAAK,SAAS,2BAA2B;AAChE,WAAO;;AAET,QAAM,wBAAwB,4BAA4B,KAAK,YAC7DA,MAAK,WAAW,MAAM,CAAC;AAEzB,SAAO,CAAC,yBAAyB,CAAC,CAACA,MAAK,MAAM,sBAAsB;AACtE;AAEM,SAAU,4BAA4B,OAAa;AACvD,SAAO,MAAM,WAAW,KAAK,MAAM,UAAU;AAC/C;AC/GM,SAAU,SAAS,aAAwB;;AAC/C,QAAM,SAAQ,KAAA,YAAY,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE;AACnC,MAAI,CAAC,OAAO;AACV,UAAM,cAAc;MAAM;;IAAA;;AAE5B,SAAO;AACT;AAEM,SAAU,aAAa,aAAwB;;AACnD,QAAM,aAAY,KAAA,YAAY,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE;AACvC,MAAI,CAAC,WAAW;AACd,UAAM,cAAc;MAAM;;IAAA;;AAE5B,SAAO;AACT;AAEM,SAAU,UAAU,aAAwB;;AAChD,QAAM,UAAS,KAAA,YAAY,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE;AACpC,MAAI,CAAC,QAAQ;AACX,UAAM,cAAc;MAAM;;IAAA;;AAE5B,SAAO;AACT;ACXA,IAAM,4BAA4B;AAalC,IAAM,kBAAmC;EACvC,gBAAgB;;AAqBlB,IAAM,kBAAkB;AAER,SAAA,UACd,uBACAK,MAAW;AAEX,QAAM,SAAS,gBAAe;AAC9B,MAAI,QAAQ;AACV,kBAAc,MAAM;AACpB,WAAO,QAAQ,QAAO;;AAGxB,SAAO,gBAAgB,uBAAuBA,IAAG,EAC9C,KAAK,aAAa,EAClB;IACC,CAAAC,YAAU,YAAYA,OAAM;;IAE5B,MAAK;IAAA;EAAG;AAEd;AAEA,SAAS,kBAAe;AACtB,QAAM,eAAe,IAAI,YAAW,EAAG;AACvC,MAAI,CAAC,cAAc;AACjB;;AAEF,QAAM,eAAe,aAAa,QAAQ,+BAA+B;AACzE,MAAI,CAAC,gBAAgB,CAAC,YAAY,YAAY,GAAG;AAC/C;;AAGF,QAAM,oBAAoB,aAAa,QAAQ,wBAAwB;AACvE,MAAI,CAAC,mBAAmB;AACtB;;AAEF,MAAI;AACF,UAAM,iBAAuC,KAAK,MAAM,iBAAiB;AACzE,WAAO;WACP,IAAM;AACN;;AAEJ;AAEA,SAAS,YAAY,QAAwC;AAC3D,QAAM,eAAe,IAAI,YAAW,EAAG;AACvC,MAAI,CAAC,UAAU,CAAC,cAAc;AAC5B;;AAGF,eAAa,QAAQ,0BAA0B,KAAK,UAAU,MAAM,CAAC;AACrE,eAAa,QACX,iCACA,OACE,KAAK,IAAG,IACN,gBAAgB,YAAW,EAAG,mBAAmB,KAAK,KAAK,GAAI,CAClE;AAEL;AAEA,IAAM,2BACJ;AAEF,SAAS,gBACP,uBACAD,MAAW;AAGX,SAAO,oBAAoB,sBAAsB,aAAa,EAC3D,KAAK,eAAY;AAChB,UAAM,YAAY,aAAa,sBAAsB,GAAG;AACxD,UAAM,SAAS,UAAU,sBAAsB,GAAG;AAClD,UAAM,iBAAiB,2DAA2D,SAAS,kCAAkC,MAAM;AACnI,UAAM,UAAU,IAAI,QAAQ,gBAAgB;MAC1C,QAAQ;MACR,SAAS,EAAE,eAAe,GAAG,eAAe,IAAI,SAAS,GAAE;;MAE3D,MAAM,KAAK,UAAU;QACnB,iBAAiBA;QACjB,uBAAuB;QACvB,QAAQ,SAAS,sBAAsB,GAAG;QAC1C,aAAa;QACb,aAAa;OACd;;IAEF,CAAA;AACD,WAAO,MAAM,OAAO,EAAE,KAAK,cAAW;AACpC,UAAI,SAAS,IAAI;AACf,eAAO,SAAS,KAAI;;AAGtB,YAAM,cAAc;QAAM;;MAAA;IAC5B,CAAC;EACH,CAAC,EACA,MAAM,MAAK;AACV,kBAAc,KAAK,wBAAwB;AAC3C,WAAO;EACT,CAAC;AACL;AAOA,SAAS,cACP,QAA6B;AAE7B,MAAI,CAAC,QAAQ;AACX,WAAO;;AAET,QAAME,2BAA0B,gBAAgB,YAAW;AAC3D,QAAM,UAAU,OAAO,WAAW,CAAA;AAClC,MAAI,QAAQ,gBAAgB,QAAW;AAGrC,IAAAA,yBAAwB,iBACtB,OAAO,QAAQ,WAAW,MAAM;SACqB;AAGvD,IAAAA,yBAAwB,iBAAiB,gBAAgB;;AAE3D,MAAI,QAAQ,gBAAgB;AAC1B,IAAAA,yBAAwB,YAAY,OAAO,QAAQ,cAAc;aACxD,gBAAgB,WAAW;AACpC,IAAAA,yBAAwB,YAAY,gBAAgB;;AAGtD,MAAI,QAAQ,sBAAsB;AAChC,IAAAA,yBAAwB,iBAAiB,QAAQ;aACxC,gBAAgB,gBAAgB;AACzC,IAAAA,yBAAwB,iBAAiB,gBAAgB;;AAI3D,MAAI,QAAQ,uBAAuB;AACjC,IAAAA,yBAAwB,eAAe,QAAQ;aACtC,gBAAgB,cAAc;AACvC,IAAAA,yBAAwB,eAAe,gBAAgB;;AAGzD,MAAI,QAAQ,yCAAyC,QAAW;AAC9D,IAAAA,yBAAwB,8BAA8B,OACpD,QAAQ,oCAAoC;aAErC,gBAAgB,gCAAgC,QAAW;AACpE,IAAAA,yBAAwB,8BACtB,gBAAgB;;AAEpB,MAAI,QAAQ,+BAA+B,QAAW;AACpD,IAAAA,yBAAwB,qBAAqB,OAC3C,QAAQ,0BAA0B;aAE3B,gBAAgB,uBAAuB,QAAW;AAC3D,IAAAA,yBAAwB,qBACtB,gBAAgB;;AAGpB,EAAAA,yBAAwB,wBAAwB,uBAC9CA,yBAAwB,kBAAkB;AAE5C,EAAAA,yBAAwB,0BAA0B,uBAChDA,yBAAwB,2BAA2B;AAErD,SAAO;AACT;AAEA,SAAS,YAAY,QAAc;AACjC,SAAO,OAAO,MAAM,IAAI,KAAK,IAAG;AAClC;AAEA,SAAS,uBAAuB,cAAoB;AAClD,SAAO,KAAK,OAAM,KAAM;AAC1B;ACnNA,IAAI,uBAAoB;AAExB,IAAI;AAEE,SAAU,yBACd,uBAA4C;AAE5C,yBAAoB;AAEpB,0BACE,yBAAyB,eAAe,qBAAqB;AAE/D,SAAO;AACT;SAEgB,oBAAiB;AAC/B,SAAO,yBAAoB;AAC7B;AAEA,SAAS,eACP,uBAA4C;AAE5C,SAAO,yBAAwB,EAC5B,KAAK,MAAM,cAAc,sBAAsB,aAAa,CAAC,EAC7D,KAAK,CAAAF,SAAO,UAAU,uBAAuBA,IAAG,CAAC,EACjD,KACC,MAAM,2BAA0B,GAChC,MAAM,2BAA0B,CAAE;AAExC;AAMA,SAAS,2BAAwB;AAC/B,QAAMD,YAAW,IAAI,YAAW,EAAG;AACnC,SAAO,IAAI,QAAQ,aAAU;AAC3B,QAAIA,aAAYA,UAAS,eAAe,YAAY;AAClD,YAAM,UAAU,MAAW;AACzB,YAAIA,UAAS,eAAe,YAAY;AACtC,UAAAA,UAAS,oBAAoB,oBAAoB,OAAO;AACxD,kBAAO;;MAEX;AACA,MAAAA,UAAS,iBAAiB,oBAAoB,OAAO;WAChD;AACL,cAAO;;EAEX,CAAC;AACH;AAEA,SAAS,6BAA0B;AACjC,yBAAoB;AACtB;AC7DA,IAAM,2BAA2B,KAAK;AACtC,IAAM,6BAA6B,MAAM;AACzC,IAAM,8BAA8B;AACpC,IAAM,0BAA0B;AAEhC,IAAI,iBAAiB;AA2BrB,IAAI,QAAsB,CAAA;AAE1B,IAAI,mBAA4B;SAEhB,wBAAqB;AACnC,MAAI,CAAC,kBAAkB;AACrB,iBAAa,0BAA0B;AACvC,uBAAmB;;AAEvB;AAUA,SAAS,aAAa,YAAkB;AACtC,aAAW,MAAK;AAEd,QAAI,kBAAkB,GAAG;AACvB;;AAGF,QAAI,MAAM,SAAS,GAAG;AACpB,0BAAmB;;AAErB,iBAAa,wBAAwB;KACpC,UAAU;AACf;AAEA,SAAS,sBAAmB;AAI1B,QAAM,SAAS,MAAM,OAAO,GAAG,2BAA2B;AAI1D,QAAM,YAAmB,OAAO,IAAI,UAAQ;IAC1C,8BAA8B,IAAI;IAClC,eAAe,OAAO,IAAI,SAAS;EACpC,EAAC;AAEF,QAAM,OAAgC;IACpC,iBAAiB,OAAO,KAAK,IAAG,CAAE;IAClC,aAAa;MACX,aAAa;;MACb,gBAAgB,CAAA;IACjB;IACD,YAAY,gBAAgB,YAAW,EAAG;IAC1C;;AAIF,mBAAiB,IAAI,EAClB,KAAK,MAAK;AACT,qBAAiB;EACnB,CAAC,EACA,MAAM,MAAK;AAGV,YAAQ,CAAC,GAAG,QAAQ,GAAG,KAAK;AAC5B;AACA,kBAAc,KAAK,eAAe,cAAc,GAAG;AACnD,iBAAa,wBAAwB;EACvC,CAAC;AACL;AAEA,SAAS,iBAAiB,MAA6B;AACrD,QAAM,qBACJ,gBAAgB,YAAW,EAAG,sBAAqB;AACrD,QAAM,OAAO,KAAK,UAAU,IAAI;AAEhC,SAAO,UAAU,cAAc,UAAU,WAAW,oBAAoB,IAAI,IACxE,QAAQ,QAAO,IACf,MAAM,oBAAoB;IACxB,QAAQ;IACR;IACA,WAAW;GACZ,EAAE,KAAI;AACb;AAEA,SAAS,WAAW,KAAe;AACjC,MAAI,CAAC,IAAI,aAAa,CAAC,IAAI,SAAS;AAClC,UAAM,cAAc;MAAM;;IAAA;;AAG5B,UAAQ,CAAC,GAAG,OAAO,GAAG;AACxB;SAGgB,iBAEdI,aAAsC;AAEtC,SAAO,IAAI,SAAQ;AACjB,UAAM,UAAUA,YAAW,GAAG,IAAI;AAClC,eAAW;MACT;MACA,WAAW,KAAK,IAAG;IACpB,CAAA;EACH;AACF;SAMgB,oBAAiB;AAC/B,SAAO,MAAM,SAAS,GAAG;AACvB,wBAAmB;;AAEvB;AC1EA,IAAI;AAGJ,SAAS,QACP,UACA,cAA0B;AAE1B,MAAI,CAAC,QAAQ;AACX,aAAS;MACP,MAAM,iBAAiB,UAAU;MACjC,OAAO;;;AAGX,SAAO,KAAK,UAAU,YAAY;AACpC;AAEM,SAAU,SAASC,QAAY;AACnC,QAAM,kBAAkB,gBAAgB,YAAW;AAEnD,MAAI,CAAC,gBAAgB,0BAA0BA,OAAM,QAAQ;AAC3D;;AAGF,MAAI,CAAC,gBAAgB,yBAAyB,CAACA,OAAM,QAAQ;AAC3D;;AAGF,MAAI,CAAC,IAAI,YAAW,EAAG,sBAAqB,GAAI;AAC9C;;AAGF,MAAI,kBAAiB,GAAI;AACvB,iBAAaA,MAAK;SACb;AAGL,6BAAyBA,OAAM,qBAAqB,EAAE,KACpD,MAAM,aAAaA,MAAK,GACxB,MAAM,aAAaA,MAAK,CAAC;;AAG/B;SAEgB,YAAS;AACvB,MAAI,QAAQ;AACV,WAAO,MAAK;;AAEhB;AAEA,SAAS,aAAaA,QAAY;AAChC,MAAI,CAAC,OAAM,GAAI;AACb;;AAGF,QAAM,kBAAkB,gBAAgB,YAAW;AACnD,MACE,CAAC,gBAAgB,kBACjB,CAAC,gBAAgB,uBACjB;AACA;;AAGF;IAAQA;IAAK;;EAAA;AACf;AAEM,SAAU,kBAAkB,gBAA8B;AAC9D,QAAM,kBAAkB,gBAAgB,YAAW;AAEnD,MAAI,CAAC,gBAAgB,wBAAwB;AAC3C;;AAKF,QAAM,oBAAoB,eAAe;AAIzC,QAAM,iBAAiB,gBAAgB,eAAe,MAAM,GAAG,EAAE,CAAC;AAClE,QAAM,gBAAgB,gBAAgB,uBAAuB,MAAM,GAAG,EAAE,CAAC;AACzE,MACE,sBAAsB,kBACtB,sBAAsB,eACtB;AACA;;AAGF,MACE,CAAC,gBAAgB,kBACjB,CAAC,gBAAgB,yBACjB;AACA;;AAGF;IAAQ;IAAc;;EAAA;AACxB;AAEA,SAAS,WACP,UACA,cAA0B;AAE1B,MAAI,iBAA4C,GAAE;AAChD,WAAO,wBAAwB,QAA0B;;AAE3D,SAAO,eAAe,QAAiB;AACzC;AAEA,SAAS,wBAAwB,gBAA8B;AAC7D,QAAM,uBAA6C;IACjD,KAAK,eAAe;IACpB,aAAa,eAAe,cAAc;IAC1C,oBAAoB;IACpB,wBAAwB,eAAe;IACvC,sBAAsB,eAAe;IACrC,+BAA+B,eAAe;IAC9C,+BAA+B,eAAe;;AAEhD,QAAM,aAA6B;IACjC,kBAAkB,mBAChB,eAAe,sBAAsB,GAAG;IAE1C,wBAAwB;;AAE1B,SAAO,KAAK,UAAU,UAAU;AAClC;AAEA,SAAS,eAAeA,QAAY;AAClC,QAAM,cAA2B;IAC/B,MAAMA,OAAM;IACZ,SAASA,OAAM;IACf,sBAAsBA,OAAM;IAC5B,aAAaA,OAAM;;AAGrB,MAAI,OAAO,KAAKA,OAAM,QAAQ,EAAE,WAAW,GAAG;AAC5C,gBAAY,WAAWA,OAAM;;AAE/B,QAAM,mBAAmBA,OAAM,cAAa;AAC5C,MAAI,OAAO,KAAK,gBAAgB,EAAE,WAAW,GAAG;AAC9C,gBAAY,oBAAoB;;AAGlC,QAAM,aAA2B;IAC/B,kBAAkB,mBAAmBA,OAAM,sBAAsB,GAAG;IACpE,cAAc;;AAEhB,SAAO,KAAK,UAAU,UAAU;AAClC;AAEA,SAAS,mBAAmB,aAAwB;AAClD,SAAO;IACL,eAAe,SAAS,WAAW;IACnC,iBAAiB,OAAM;IACvB,cAAc;MACZ,aAAa;MACb,UAAU,IAAI,YAAW,EAAG,OAAM;MAClC,uBAAuB,uBAAsB;MAC7C,kBAAkB,mBAAkB;MACpC,2BAA2B,2BAA0B;IACtD;IACD,2BAA2B;;AAE/B;AC9MgB,SAAA,0BACd,uBACA,OAAuB;AAEvB,QAAM,mBAAmB;AACzB,MAAI,CAAC,oBAAoB,iBAAiB,kBAAkB,QAAW;AACrE;;AAEF,QAAM,aAAa,IAAI,YAAW,EAAG,cAAa;AAClD,QAAM,cAAc,KAAK,OACtB,iBAAiB,YAAY,cAAc,GAAI;AAElD,QAAM,4BAA4B,iBAAiB,gBAC/C,KAAK,OACF,iBAAiB,gBAAgB,iBAAiB,aAAa,GAAI,IAEtE;AACJ,QAAM,4BAA4B,KAAK,OACpC,iBAAiB,cAAc,iBAAiB,aAAa,GAAI;AAGpE,QAAM,MAAM,iBAAiB,QAAQ,iBAAiB,KAAK,MAAM,GAAG,EAAE,CAAC;AACvE,QAAM,iBAAiC;IACrC;IACA;IACA,sBAAsB,iBAAiB;IACvC;IACA;IACA;;AAGF,oBAAkB,cAAc;AAClC;ACtDA,IAAM,yBAAyB;AAC/B,IAAM,uBAAuB;AAC7B,IAAM,aAAa;EACjB;EACA;EACA;EACA;EACA;EACA;;AAOc,SAAA,kBAAkBT,OAAc,WAAkB;AAChE,MAAIA,MAAK,WAAW,KAAKA,MAAK,SAAS,wBAAwB;AAC7D,WAAO;;AAET,SACG,aACC,UAAU,WAAW,0BAA0B,KAC/C,WAAW,QAAQA,KAAI,IAAI,MAC7B,CAACA,MAAK,WAAW,oBAAoB;AAEzC;AAQM,SAAU,4BAA4B,eAAqB;AAC/D,QAAM,iBAAyB,KAAK,MAAM,aAAa;AACvD,MAAI,iBAAiB,eAAe;AAClC,kBAAc,KACZ,6DAA6D,cAAc,GAAG;;AAGlF,SAAO;AACT;IChBa,cAAA,OAAK;;;;;;;;;EAoBhB,YACW,uBACAA,OACA,SAAS,OAClB,kBAAyB;AAHhB,SAAqB,wBAArB;AACA,SAAI,OAAJA;AACA,SAAM,SAAN;AAtBH,SAAA,QAA6C;AAG7C,SAAgB,mBAA8B,CAAA;AACtD,SAAQ,WAAsC,CAAA;AACtC,SAAA,MAAM,IAAI,YAAW;AACrB,SAAA,WAAW,KAAK,MAAM,KAAK,OAAM,IAAK,GAAO;AAmBnD,QAAI,CAAC,KAAK,QAAQ;AAChB,WAAK,iBAAiB,GAAG,uBAAuB,IAAI,KAAK,QAAQ,IAAI,KAAK,IAAI;AAC9E,WAAK,gBAAgB,GAAG,sBAAsB,IAAI,KAAK,QAAQ,IAAI,KAAK,IAAI;AAC5E,WAAK,eACH,oBACA,GAAG,oBAAoB,IAAI,KAAK,QAAQ,IAAI,KAAK,IAAI;AAEvD,UAAI,kBAAkB;AAGpB,aAAK,sBAAqB;;;;;;;EAQhC,QAAK;AACH,QAAI,KAAK,UAAK,GAA+B;AAC3C,YAAM,cAAc,OAAuC,iBAAA;QACzD,WAAW,KAAK;MACjB,CAAA;;AAEH,SAAK,IAAI,KAAK,KAAK,cAAc;AACjC,SAAK,QAAK;;;;;;EAOZ,OAAI;AACF,QAAI,KAAK,UAAK,GAAyB;AACrC,YAAM,cAAc,OAAuC,iBAAA;QACzD,WAAW,KAAK;MACjB,CAAA;;AAEH,SAAK,QAAK;AACV,SAAK,IAAI,KAAK,KAAK,aAAa;AAChC,SAAK,IAAI,QACP,KAAK,cACL,KAAK,gBACL,KAAK,aAAa;AAEpB,SAAK,sBAAqB;AAC1B,aAAS,IAAI;;;;;;;;;EAUf,OACE,WACA,UACA,SAGC;AAED,QAAI,aAAa,GAAG;AAClB,YAAM,cAAc,OAA+C,+BAAA;QACjE,WAAW,KAAK;MACjB,CAAA;;AAEH,QAAI,YAAY,GAAG;AACjB,YAAM,cAAc,OAA6C,8BAAA;QAC/D,WAAW,KAAK;MACjB,CAAA;;AAGH,SAAK,aAAa,KAAK,MAAM,WAAW,GAAI;AAC5C,SAAK,cAAc,KAAK,MAAM,YAAY,GAAI;AAC9C,QAAI,WAAW,QAAQ,YAAY;AACjC,WAAK,mBAAgB,OAAA,OAAA,CAAA,GAAQ,QAAQ,UAAU;;AAEjD,QAAI,WAAW,QAAQ,SAAS;AAC9B,iBAAW,cAAc,OAAO,KAAK,QAAQ,OAAO,GAAG;AACrD,YAAI,CAAC,MAAM,OAAO,QAAQ,QAAQ,UAAU,CAAC,CAAC,GAAG;AAC/C,eAAK,SAAS,UAAU,IAAI,KAAK,MAC/B,OAAO,QAAQ,QAAQ,UAAU,CAAC,CAAC;;;;AAK3C,aAAS,IAAI;;;;;;;;;EAUf,gBAAgB,SAAiB,eAAe,GAAC;AAC/C,QAAI,KAAK,SAAS,OAAO,MAAM,QAAW;AACxC,WAAK,UAAU,SAAS,YAAY;WAC/B;AACL,WAAK,UAAU,SAAS,KAAK,SAAS,OAAO,IAAI,YAAY;;;;;;;;;EAUjE,UAAU,SAAiB,cAAoB;AAC7C,QAAI,kBAAkB,SAAS,KAAK,IAAI,GAAG;AACzC,WAAK,SAAS,OAAO,IAAI,4BAA4B,iBAAY,QAAZ,iBAAA,SAAA,eAAgB,CAAC;WACjE;AACL,YAAM,cAAc,OAA6C,8BAAA;QAC/D,kBAAkB;MACnB,CAAA;;;;;;;;EASL,UAAU,SAAe;AACvB,WAAO,KAAK,SAAS,OAAO,KAAK;;;;;;;EAQnC,aAAa,MAAc,OAAa;AACtC,UAAM,cAAc,2BAA2B,IAAI;AACnD,UAAM,eAAe,4BAA4B,KAAK;AACtD,QAAI,eAAe,cAAc;AAC/B,WAAK,iBAAiB,IAAI,IAAI;AAC9B;;AAGF,QAAI,CAAC,aAAa;AAChB,YAAM,cAAc,OAAyC,0BAAA;QAC3D,eAAe;MAChB,CAAA;;AAEH,QAAI,CAAC,cAAc;AACjB,YAAM,cAAc,OAA0C,2BAAA;QAC5D,gBAAgB;MACjB,CAAA;;;;;;;EAQL,aAAa,MAAY;AACvB,WAAO,KAAK,iBAAiB,IAAI;;EAGnC,gBAAgB,MAAY;AAC1B,QAAI,KAAK,iBAAiB,IAAI,MAAM,QAAW;AAC7C;;AAEF,WAAO,KAAK,iBAAiB,IAAI;;EAGnC,gBAAa;AACX,WAAY,OAAA,OAAA,CAAA,GAAA,KAAK,gBAAgB;;EAG3B,aAAa,WAAiB;AACpC,SAAK,cAAc;;EAGb,YAAY,UAAgB;AAClC,SAAK,aAAa;;;;;;EAOZ,wBAAqB;AAC3B,UAAM,qBAAqB,KAAK,IAAI,iBAAiB,KAAK,YAAY;AACtE,UAAM,mBAAmB,sBAAsB,mBAAmB,CAAC;AACnE,QAAI,kBAAkB;AACpB,WAAK,aAAa,KAAK,MAAM,iBAAiB,WAAW,GAAI;AAC7D,WAAK,cAAc,KAAK,OACrB,iBAAiB,YAAY,KAAK,IAAI,cAAa,KAAM,GAAI;;;;;;;;;EAWpE,OAAO,eACL,uBACA,mBACA,cACAU,kBACAC,kBAAwB;AAExB,UAAM,QAAQ,IAAI,YAAW,EAAG,OAAM;AACtC,QAAI,CAAC,OAAO;AACV;;AAEF,UAAMF,SAAQ,IAAI,OAChB,uBACA,6BAA6B,OAC7B,IAAI;AAEN,UAAM,eAAe,KAAK,MAAM,IAAI,YAAW,EAAG,cAAa,IAAK,GAAI;AACxE,IAAAA,OAAM,aAAa,YAAY;AAG/B,QAAI,qBAAqB,kBAAkB,CAAC,GAAG;AAC7C,MAAAA,OAAM,YAAY,KAAK,MAAM,kBAAkB,CAAC,EAAE,WAAW,GAAI,CAAC;AAClE,MAAAA,OAAM,UACJ,kBACA,KAAK,MAAM,kBAAkB,CAAC,EAAE,iBAAiB,GAAI,CAAC;AAExD,MAAAA,OAAM,UACJ,4BACA,KAAK,MAAM,kBAAkB,CAAC,EAAE,2BAA2B,GAAI,CAAC;AAElE,MAAAA,OAAM,UACJ,gBACA,KAAK,MAAM,kBAAkB,CAAC,EAAE,eAAe,GAAI,CAAC;;AAIxD,UAAM,cAAc;AACpB,UAAM,yBAAyB;AAC/B,QAAI,cAAc;AAChB,YAAM,aAAa,aAAa,KAC9B,iBAAe,YAAY,SAAS,WAAW;AAEjD,UAAI,cAAc,WAAW,WAAW;AACtC,QAAAA,OAAM,UACJ,0BACA,KAAK,MAAM,WAAW,YAAY,GAAI,CAAC;;AAG3C,YAAM,uBAAuB,aAAa,KACxC,iBAAe,YAAY,SAAS,sBAAsB;AAE5D,UAAI,wBAAwB,qBAAqB,WAAW;AAC1D,QAAAA,OAAM,UACJ,qCACA,KAAK,MAAM,qBAAqB,YAAY,GAAI,CAAC;;AAIrD,UAAIE,kBAAiB;AACnB,QAAAF,OAAM,UACJ,gCACA,KAAK,MAAME,mBAAkB,GAAI,CAAC;;;AAKxC,SAAK,kBACHF,QACA,sCACA,yCACAC,iBAAgB,GAAG;AAErB,SAAK,kBACHD,QACA,qCACA,wCACAC,iBAAgB,GAAG;AAErB,SAAK,kBACHD,QACA,uCACA,0CACAC,iBAAgB,GAAG;AAKrB,aAASD,MAAK;AACd,cAAS;;EAGX,OAAO,kBACLA,QACA,WACA,cACA,QAAwB;AAExB,QAAI,QAAQ;AACV,MAAAA,OAAM,UAAU,WAAW,KAAK,MAAM,OAAO,QAAQ,GAAI,CAAC;AAC1D,UAAI,OAAO,oBAAoB;AAC7B,QAAAA,OAAM,aAAa,cAAc,OAAO,kBAAkB;;;;EAKhE,OAAO,sBACL,uBACA,aAAmB;AAEnB,UAAMA,SAAQ,IAAI,OAChB,uBACA,aACA,OACA,WAAW;AAEb,aAASA,MAAK;;AAEjB;ACjXD,IAAI,kBAAmC,CAAA;AACvC,IAAI,oBAA6B;AACjC,IAAI;AAEE,SAAU,kBACd,uBAA4C;AAG5C,MAAI,CAAC,OAAM,GAAI;AACb;;AAKF,aAAW,MAAM,eAAe,qBAAqB,GAAG,CAAC;AACzD,aAAW,MAAM,qBAAqB,qBAAqB,GAAG,CAAC;AAC/D,aAAW,MAAM,sBAAsB,qBAAqB,GAAG,CAAC;AAClE;AAEA,SAAS,qBACP,uBAA4C;AAE5C,QAAM,MAAM,IAAI,YAAW;AAC3B,QAAM,YAAY,IAAI,iBAAiB,UAAU;AACjD,aAAW,YAAY,WAAW;AAChC,8BAA0B,uBAAuB,QAAQ;;AAE3D,MAAI,cAAc,YAAY,WAC5B,0BAA0B,uBAAuB,KAAK,CAAC;AAE3D;AAEA,SAAS,eAAe,uBAA4C;AAClE,QAAM,MAAM,IAAI,YAAW;AAE3B,MAAI,gBAAgB,QAAQ;AAC1B,QAAI,SAAS,iBAAiB,YAAY,MACxC,aAAa,qBAAqB,CAAC;SAEhC;AACL,QAAI,SAAS,iBAAiB,UAAU,MACtC,aAAa,qBAAqB,CAAC;;AAGvC,MAAI,SAAS,iBAAiB,oBAAoB,MAAK;AACrD,QAAI,IAAI,SAAS,oBAAoB,UAAU;AAC7C,mBAAa,qBAAqB;;EAEtC,CAAC;AAED,MAAI,IAAI,mBAAmB;AACzB,QAAI,kBAAkB,CAAC,QAAe;AACpC,wBAAkB;IACpB,CAAC;;AAGH,MAAI,MAAM,CAAC,WAAoC;;AAC7C,oBAAgB,MAAM;MACpB,OAAO,OAAO;MACd,qBAAoB,KAAA,OAAO,iBAAW,QAAA,OAAA,SAAA,SAAA,GAAE;;EAE5C,CAAC;AACD,MAAI,MAAM,CAAC,WAAoC;;AAC7C,oBAAgB,MAAM;MACpB,OAAO,OAAO;MACd,qBAAoB,KAAA,OAAO,iBAAW,QAAA,OAAA,SAAA,SAAA,GAAE;;EAE5C,CAAC;AACD,MAAI,MAAM,CAAC,WAAoC;;AAC7C,oBAAgB,MAAM;MACpB,OAAO,OAAO;MACd,qBAAoB,KAAA,OAAO,iBAAW,QAAA,OAAA,SAAA,SAAA,GAAE;;EAE5C,CAAC;AACH;AAEA,SAAS,sBACP,uBAA4C;AAE5C,QAAM,MAAM,IAAI,YAAW;AAE3B,QAAM,WAAW,IAAI,iBAAiB,SAAS;AAC/C,aAAW,WAAW,UAAU;AAC9B,0BAAsB,uBAAuB,OAAO;;AAGtD,MAAI,cAAc,WAAW,WAC3B,sBAAsB,uBAAuB,KAAK,CAAC;AAEvD;AAEA,SAAS,sBACP,uBACA,SAAyB;AAEzB,QAAM,cAAc,QAAQ;AAG5B,MACE,YAAY,UAAU,GAAG,qBAAqB,MAAM,MACpD,sBACA;AACA;;AAEF,QAAM,sBAAsB,uBAAuB,WAAW;AAChE;AAEA,SAAS,aAAa,uBAA4C;AAChE,MAAI,CAAC,mBAAmB;AACtB,wBAAoB;AACpB,UAAM,MAAM,IAAI,YAAW;AAC3B,UAAM,oBAAoB,IAAI,iBAC5B,YAAY;AAEd,UAAM,eAAe,IAAI,iBAAiB,OAAO;AAIjD,eAAW,MAAK;AACd,YAAM,eACJ,uBACA,mBACA,cACA,iBACA,eAAe;OAEhB,CAAC;;AAER;ICpIa,8BAAqB;EAGhC,YACW,KACA,eAA6C;AAD7C,SAAG,MAAH;AACA,SAAa,gBAAb;AAJH,SAAW,cAAY;;;;;;;;;;;EAgB/B,MAAM,UAA8B;AAClC,QAAI,KAAK,aAAa;AACpB;;AAGF,SAAI,aAAQ,QAAR,aAAQ,SAAA,SAAR,SAAU,2BAA0B,QAAW;AACjD,WAAK,wBAAwB,SAAS;;AAExC,SAAI,aAAQ,QAAR,aAAQ,SAAA,SAAR,SAAU,4BAA2B,QAAW;AAClD,WAAK,yBAAyB,SAAS;;AAGzC,QAAI,IAAI,YAAW,EAAG,sBAAqB,GAAI;AAC7C,gCAAyB,EACtB,KAAK,iBAAc;AAClB,YAAI,aAAa;AACf,gCAAqB;AACrB,mCAAyB,IAAI,EAAE,KAC7B,MAAM,kBAAkB,IAAI,GAC5B,MAAM,kBAAkB,IAAI,CAAC;AAE/B,eAAK,cAAc;;MAEvB,CAAC,EACA,MAAM,WAAQ;AACb,sBAAc,KAAK,0CAA0C,KAAK,EAAE;MACtE,CAAC;WACE;AACL,oBAAc,KACZ,mHACmD;;;EAKzD,IAAI,uBAAuB,KAAY;AACrC,oBAAgB,YAAW,EAAG,yBAAyB;;EAEzD,IAAI,yBAAsB;AACxB,WAAO,gBAAgB,YAAW,EAAG;;EAGvC,IAAI,sBAAsB,KAAY;AACpC,oBAAgB,YAAW,EAAG,wBAAwB;;EAExD,IAAI,wBAAqB;AACvB,WAAO,gBAAgB,YAAW,EAAG;;AAExC;AC3CD,IAAM,qBAAqB;AAOX,SAAA,eACd,MAAmB,OAAM,GAAE;AAE3B,QAAM,mBAAmB,GAAG;AAC5B,QAAM,WAAW,aAAa,KAAK,aAAa;AAChD,QAAM,eAAe,SAAS,aAAY;AAC1C,SAAO;AACT;AAQgB,SAAA,sBACd,KACA,UAA8B;AAE9B,QAAM,mBAAmB,GAAG;AAC5B,QAAM,WAAW,aAAa,KAAK,aAAa;AAIhD,MAAI,SAAS,cAAa,GAAI;AAC5B,UAAM,mBAAmB,SAAS,aAAY;AAC9C,UAAM,kBAAkB,SAAS,WAAU;AAC3C,QAAI,UAAU,iBAAiB,aAAQ,QAAR,aAAQ,SAAR,WAAY,CAAA,CAAE,GAAG;AAC9C,aAAO;WACF;AACL,YAAM,cAAc;QAAM;;MAAA;;;AAI9B,QAAM,eAAe,SAAS,WAAW;IACvC,SAAS;EACV,CAAA;AACD,SAAO;AACT;AAQgB,SAAA,MACdG,cACAZ,OAAY;AAEZ,EAAAY,eAAc,mBAAmBA,YAAW;AAC5C,SAAO,IAAI,MAAMA,cAAsCZ,KAAI;AAC7D;AAEA,IAAM,UAA0C,CAC9C,WACA,EAAE,SAAS,SAAQ,MACjB;AAEF,QAAM,MAAM,UAAU,YAAY,KAAK,EAAE,aAAY;AACrD,QAAM,gBAAgB,UACnB,YAAY,wBAAwB,EACpC,aAAY;AAEf,MAAI,IAAI,SAAS,oBAAoB;AACnC,UAAM,cAAc;MAAM;;IAAA;;AAE5B,MAAI,OAAO,WAAW,aAAa;AACjC,UAAM,cAAc;MAAM;;IAAA;;AAE5B,WAAS,MAAM;AACf,QAAM,eAAe,IAAI,sBAAsB,KAAK,aAAa;AACjE,eAAa,MAAM,QAAQ;AAE3B,SAAO;AACT;AAEA,SAAS,sBAAmB;AAC1B,qBACE,IAAI;IAAU;IAAe;IAA8B;;EAAA,CAAA;AAE7D,kBAAgB,MAAM,OAAO;AAE7B,kBAAgB,MAAM,SAAS,SAAkB;AACnD;AAEA,oBAAmB;",
  "names": ["t", "e", "n", "r", "a", "i", "o", "c", "t", "e", "n", "r", "i", "a", "o", "t", "e", "n", "r", "i", "o", "c", "u", "s", "f", "d", "l", "m", "a", "window", "vitalsOnLCP", "vitalsOnINP", "vitalsOnCLS", "name", "i", "VisibilityState", "navigator", "document", "iid", "config", "settingsServiceInstance", "serializer", "trace", "webVitalMetrics", "firstInputDelay", "performance"]
}
